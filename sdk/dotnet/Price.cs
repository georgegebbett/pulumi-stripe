// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    /// <summary>
    /// With this resource, you can create a price - [Stripe API price documentation](https://stripe.com/docs/api/prices).
    /// 
    /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of
    /// products. Products help you track inventory or provisioning, and prices help you track payment terms.
    /// 
    /// Different physical goods or levels of service should be represented by products, and pricing options should be
    /// represented by prices. This approach lets you change prices without having to change your provisioning scheme.
    /// 
    /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and â‚¬9 once.
    /// 
    /// &gt; Removal of the price isn't supported through the Stripe SDK. The best practice, which this provider follows,
    /// is to archive the price by marking it as inactive on destroy, which indicates that the price is no longer
    /// available for purchase.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Stripe = Pulumi.Stripe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // basic price for the product
    ///     var pricePrice = new Stripe.Price("pricePrice", new()
    ///     {
    ///         Product = stripe_product.Product.Id,
    ///         Currency = "aud",
    ///         UnitAmount = 100,
    ///     });
    /// 
    ///     // basic free price for the product
    ///     var priceIndex_pricePrice = new Stripe.Price("priceIndex/pricePrice", new()
    ///     {
    ///         Product = stripe_product.Product.Id,
    ///         Currency = "aud",
    ///         UnitAmount = -1,
    ///     });
    /// 
    ///     // recurring price for the product
    ///     var priceStripeIndex_pricePrice = new Stripe.Price("priceStripeIndex/pricePrice", new()
    ///     {
    ///         Product = stripe_product.Product.Id,
    ///         Currency = "aud",
    ///         BillingScheme = "per_unit",
    ///         UnitAmount = 100,
    ///         Recurring = new Stripe.Inputs.PriceRecurringArgs
    ///         {
    ///             Interval = "week",
    ///             IntervalCount = 1,
    ///         },
    ///     });
    /// 
    ///     // tiered price for the product
    ///     var priceStripeIndex_pricePrice1 = new Stripe.Price("priceStripeIndex/pricePrice1", new()
    ///     {
    ///         Product = stripe_product.Product.Id,
    ///         Currency = "aud",
    ///         BillingScheme = "tiered",
    ///         TiersMode = "graduated",
    ///         Tiers = new[]
    ///         {
    ///             new Stripe.Inputs.PriceTierArgs
    ///             {
    ///                 UpTo = 10,
    ///                 UnitAmount = 0,
    ///             },
    ///             new Stripe.Inputs.PriceTierArgs
    ///             {
    ///                 UpTo = 100,
    ///                 UnitAmount = 300,
    ///             },
    ///             new Stripe.Inputs.PriceTierArgs
    ///             {
    ///                 UpTo = -1,
    ///                 UnitAmountDecimal = 100.5,
    ///             },
    ///         },
    ///         Recurring = new Stripe.Inputs.PriceRecurringArgs
    ///         {
    ///             Interval = "week",
    ///             AggregateUsage = "sum",
    ///             IntervalCount = 2,
    ///             UsageType = "metered",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## Note on updating prices
    /// 
    /// Once created, you can update the `active`, `metadata`, `nickname`, `lookup_key`, `tax_behaviour` (only if unspecified)
    /// and `transfer_lookup_key` attributes.
    /// 
    /// Other attribute edits will trigger a destroy action (archival) and creation of a new price entry.
    /// </summary>
    [StripeResourceType("stripe:index/price:Price")]
    public partial class Price : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bool. Whether the price can be used for new purchases. Defaults to `true`.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// String. Describes how to compute the price per period. Either `per_unit` or `tiered`
        /// . `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per
        /// unit in quantity (for prices with `usage_type=licensed`), or per unit of total usage (for prices
        /// with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as
        /// defined using the `tiers` and `tiers_mode` attributes.
        /// </summary>
        [Output("billingScheme")]
        public Output<string> BillingScheme { get; private set; } = null!;

        /// <summary>
        /// String. Three-letter ISO currency code, in lowercase - [supported currencies](https://stripe.com/docs/currencies).
        /// </summary>
        [Output("currency")]
        public Output<string> Currency { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Prices defined in each available currency option. For details
        /// of individual arguments see Currency Options.
        /// </summary>
        [Output("currencyOptions")]
        public Output<ImmutableArray<Outputs.PriceCurrencyOption>> CurrencyOptions { get; private set; } = null!;

        /// <summary>
        /// String. A lookup key used to retrieve prices dynamically from a static string.
        /// </summary>
        [Output("lookupKey")]
        public Output<string?> LookupKey { get; private set; } = null!;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// String. A brief description of the price, hidden from customers.
        /// </summary>
        [Output("nickname")]
        public Output<string?> Nickname { get; private set; } = null!;

        /// <summary>
        /// String. The ID of the product that this price will belong to.
        /// </summary>
        [Output("product")]
        public Output<string> Product { get; private set; } = null!;

        /// <summary>
        /// List(Resource). The recurring components of a price such as `interval` and `usage_type`. For
        /// details of individual arguments see Recurring.
        /// </summary>
        [Output("recurring")]
        public Output<Outputs.PriceRecurring?> Recurring { get; private set; } = null!;

        /// <summary>
        /// String. Specifies whether the price is considered inclusive of taxes or exclusive of
        /// taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it
        /// cannot be changed, default is `unspecified`.
        /// </summary>
        [Output("taxBehaviour")]
        public Output<string?> TaxBehaviour { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Each element represents a pricing tier. This parameter requires `billing_scheme`
        /// to be set to `tiered`. See also the documentation for `billing_scheme`. For details of individual arguments
        /// see Tiers.
        /// </summary>
        [Output("tiers")]
        public Output<ImmutableArray<Outputs.PriceTier>> Tiers { get; private set; } = null!;

        /// <summary>
        /// String. Defines if the tiering price should be `graduated`
        /// or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per-unit price,
        /// in `graduated` tiering pricing can successively change as the quantity grows.
        /// </summary>
        [Output("tiersMode")]
        public Output<string?> TiersMode { get; private set; } = null!;

        /// <summary>
        /// Bool. If set to `true`, will atomically remove the lookup key from the existing
        /// price, and assign it to this price.
        /// </summary>
        [Output("transferLookupKey")]
        public Output<bool?> TransferLookupKey { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Apply a transformation to the reported usage or set quantity before
        /// computing the billed price. Cannot be combined with `tiers`. For details of individual arguments
        /// see Transform Quantity.
        /// </summary>
        [Output("transformQuantity")]
        public Output<Outputs.PriceTransformQuantity?> TransformQuantity { get; private set; } = null!;

        /// <summary>
        /// String. One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a
        /// recurring (subscription) purchase.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Int. A positive integer in cents (or `-1` for a free
        /// price) representing how much to charge.
        /// </summary>
        [Output("unitAmount")]
        public Output<int> UnitAmount { get; private set; } = null!;

        /// <summary>
        /// Float. Same as `unit_amount`, but accepts a decimal value in cents with at most 12
        /// decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
        /// </summary>
        [Output("unitAmountDecimal")]
        public Output<double> UnitAmountDecimal { get; private set; } = null!;


        /// <summary>
        /// Create a Price resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Price(string name, PriceArgs args, CustomResourceOptions? options = null)
            : base("stripe:index/price:Price", name, args ?? new PriceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Price(string name, Input<string> id, PriceState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/price:Price", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/georgegebbett",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Price resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Price Get(string name, Input<string> id, PriceState? state = null, CustomResourceOptions? options = null)
        {
            return new Price(name, id, state, options);
        }
    }

    public sealed class PriceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bool. Whether the price can be used for new purchases. Defaults to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// String. Describes how to compute the price per period. Either `per_unit` or `tiered`
        /// . `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per
        /// unit in quantity (for prices with `usage_type=licensed`), or per unit of total usage (for prices
        /// with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as
        /// defined using the `tiers` and `tiers_mode` attributes.
        /// </summary>
        [Input("billingScheme")]
        public Input<string>? BillingScheme { get; set; }

        /// <summary>
        /// String. Three-letter ISO currency code, in lowercase - [supported currencies](https://stripe.com/docs/currencies).
        /// </summary>
        [Input("currency", required: true)]
        public Input<string> Currency { get; set; } = null!;

        [Input("currencyOptions")]
        private InputList<Inputs.PriceCurrencyOptionArgs>? _currencyOptions;

        /// <summary>
        /// List(Resource). Prices defined in each available currency option. For details
        /// of individual arguments see Currency Options.
        /// </summary>
        public InputList<Inputs.PriceCurrencyOptionArgs> CurrencyOptions
        {
            get => _currencyOptions ?? (_currencyOptions = new InputList<Inputs.PriceCurrencyOptionArgs>());
            set => _currencyOptions = value;
        }

        /// <summary>
        /// String. A lookup key used to retrieve prices dynamically from a static string.
        /// </summary>
        [Input("lookupKey")]
        public Input<string>? LookupKey { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// String. A brief description of the price, hidden from customers.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        /// <summary>
        /// String. The ID of the product that this price will belong to.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// List(Resource). The recurring components of a price such as `interval` and `usage_type`. For
        /// details of individual arguments see Recurring.
        /// </summary>
        [Input("recurring")]
        public Input<Inputs.PriceRecurringArgs>? Recurring { get; set; }

        /// <summary>
        /// String. Specifies whether the price is considered inclusive of taxes or exclusive of
        /// taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it
        /// cannot be changed, default is `unspecified`.
        /// </summary>
        [Input("taxBehaviour")]
        public Input<string>? TaxBehaviour { get; set; }

        [Input("tiers")]
        private InputList<Inputs.PriceTierArgs>? _tiers;

        /// <summary>
        /// List(Resource). Each element represents a pricing tier. This parameter requires `billing_scheme`
        /// to be set to `tiered`. See also the documentation for `billing_scheme`. For details of individual arguments
        /// see Tiers.
        /// </summary>
        public InputList<Inputs.PriceTierArgs> Tiers
        {
            get => _tiers ?? (_tiers = new InputList<Inputs.PriceTierArgs>());
            set => _tiers = value;
        }

        /// <summary>
        /// String. Defines if the tiering price should be `graduated`
        /// or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per-unit price,
        /// in `graduated` tiering pricing can successively change as the quantity grows.
        /// </summary>
        [Input("tiersMode")]
        public Input<string>? TiersMode { get; set; }

        /// <summary>
        /// Bool. If set to `true`, will atomically remove the lookup key from the existing
        /// price, and assign it to this price.
        /// </summary>
        [Input("transferLookupKey")]
        public Input<bool>? TransferLookupKey { get; set; }

        /// <summary>
        /// List(Resource). Apply a transformation to the reported usage or set quantity before
        /// computing the billed price. Cannot be combined with `tiers`. For details of individual arguments
        /// see Transform Quantity.
        /// </summary>
        [Input("transformQuantity")]
        public Input<Inputs.PriceTransformQuantityArgs>? TransformQuantity { get; set; }

        /// <summary>
        /// Int. A positive integer in cents (or `-1` for a free
        /// price) representing how much to charge.
        /// </summary>
        [Input("unitAmount")]
        public Input<int>? UnitAmount { get; set; }

        /// <summary>
        /// Float. Same as `unit_amount`, but accepts a decimal value in cents with at most 12
        /// decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
        /// </summary>
        [Input("unitAmountDecimal")]
        public Input<double>? UnitAmountDecimal { get; set; }

        public PriceArgs()
        {
        }
        public static new PriceArgs Empty => new PriceArgs();
    }

    public sealed class PriceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bool. Whether the price can be used for new purchases. Defaults to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// String. Describes how to compute the price per period. Either `per_unit` or `tiered`
        /// . `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per
        /// unit in quantity (for prices with `usage_type=licensed`), or per unit of total usage (for prices
        /// with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as
        /// defined using the `tiers` and `tiers_mode` attributes.
        /// </summary>
        [Input("billingScheme")]
        public Input<string>? BillingScheme { get; set; }

        /// <summary>
        /// String. Three-letter ISO currency code, in lowercase - [supported currencies](https://stripe.com/docs/currencies).
        /// </summary>
        [Input("currency")]
        public Input<string>? Currency { get; set; }

        [Input("currencyOptions")]
        private InputList<Inputs.PriceCurrencyOptionGetArgs>? _currencyOptions;

        /// <summary>
        /// List(Resource). Prices defined in each available currency option. For details
        /// of individual arguments see Currency Options.
        /// </summary>
        public InputList<Inputs.PriceCurrencyOptionGetArgs> CurrencyOptions
        {
            get => _currencyOptions ?? (_currencyOptions = new InputList<Inputs.PriceCurrencyOptionGetArgs>());
            set => _currencyOptions = value;
        }

        /// <summary>
        /// String. A lookup key used to retrieve prices dynamically from a static string.
        /// </summary>
        [Input("lookupKey")]
        public Input<string>? LookupKey { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// String. A brief description of the price, hidden from customers.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        /// <summary>
        /// String. The ID of the product that this price will belong to.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// List(Resource). The recurring components of a price such as `interval` and `usage_type`. For
        /// details of individual arguments see Recurring.
        /// </summary>
        [Input("recurring")]
        public Input<Inputs.PriceRecurringGetArgs>? Recurring { get; set; }

        /// <summary>
        /// String. Specifies whether the price is considered inclusive of taxes or exclusive of
        /// taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it
        /// cannot be changed, default is `unspecified`.
        /// </summary>
        [Input("taxBehaviour")]
        public Input<string>? TaxBehaviour { get; set; }

        [Input("tiers")]
        private InputList<Inputs.PriceTierGetArgs>? _tiers;

        /// <summary>
        /// List(Resource). Each element represents a pricing tier. This parameter requires `billing_scheme`
        /// to be set to `tiered`. See also the documentation for `billing_scheme`. For details of individual arguments
        /// see Tiers.
        /// </summary>
        public InputList<Inputs.PriceTierGetArgs> Tiers
        {
            get => _tiers ?? (_tiers = new InputList<Inputs.PriceTierGetArgs>());
            set => _tiers = value;
        }

        /// <summary>
        /// String. Defines if the tiering price should be `graduated`
        /// or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per-unit price,
        /// in `graduated` tiering pricing can successively change as the quantity grows.
        /// </summary>
        [Input("tiersMode")]
        public Input<string>? TiersMode { get; set; }

        /// <summary>
        /// Bool. If set to `true`, will atomically remove the lookup key from the existing
        /// price, and assign it to this price.
        /// </summary>
        [Input("transferLookupKey")]
        public Input<bool>? TransferLookupKey { get; set; }

        /// <summary>
        /// List(Resource). Apply a transformation to the reported usage or set quantity before
        /// computing the billed price. Cannot be combined with `tiers`. For details of individual arguments
        /// see Transform Quantity.
        /// </summary>
        [Input("transformQuantity")]
        public Input<Inputs.PriceTransformQuantityGetArgs>? TransformQuantity { get; set; }

        /// <summary>
        /// String. One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a
        /// recurring (subscription) purchase.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Int. A positive integer in cents (or `-1` for a free
        /// price) representing how much to charge.
        /// </summary>
        [Input("unitAmount")]
        public Input<int>? UnitAmount { get; set; }

        /// <summary>
        /// Float. Same as `unit_amount`, but accepts a decimal value in cents with at most 12
        /// decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
        /// </summary>
        [Input("unitAmountDecimal")]
        public Input<double>? UnitAmountDecimal { get; set; }

        public PriceState()
        {
        }
        public static new PriceState Empty => new PriceState();
    }
}
