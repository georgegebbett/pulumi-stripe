// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    /// <summary>
    /// This object represents files hosted on Stripe's servers - [Stripe API file documentation](https://stripe.com/docs/api/files).
    /// You can upload files with the create file request (for example, when uploading dispute evidence).
    /// 
    /// Stripe File upload [guide](https://stripe.com/docs/file-upload#uploading-a-file)
    /// 
    /// &gt; Update or removal of the file isn't supported through the Stripe SDK.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Stripe = Pulumi.Stripe;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // minimal file field
    ///     var logoFile = new Stripe.File("logoFile", new()
    ///     {
    ///         Filename = "logo.jpg",
    ///         Purpose = "business_logo",
    ///         Base64content = ReadFileBase64($"{HOME}/logo.jpg"),
    ///     });
    /// 
    ///     // file with file link
    ///     var logoIndex_fileFile = new Stripe.File("logoIndex/fileFile", new()
    ///     {
    ///         Filename = "logo.jpg",
    ///         Purpose = "business_logo",
    ///         Base64content = ReadFileBase64($"{HOME}/logo.jpg"),
    ///         LinkData = new Stripe.Inputs.FileLinkDataArgs
    ///         {
    ///             Create = true,
    ///             ExpiresAt = 1826659124,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [StripeResourceType("stripe:index/file:File")]
    public partial class File : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A content file to upload encoded by base64.
        /// </summary>
        [Output("base64content")]
        public Output<string> Base64content { get; private set; } = null!;

        /// <summary>
        /// String. Time at which the object was created. Measured in seconds since the Unix epoch.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// Int. The link isn’t available after this future timestamp.
        /// </summary>
        [Output("expiresAt")]
        public Output<int> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// String. The suitable name for saving the file to a filesystem.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// Optional parameters that automatically create a file link for the newly created file.
        /// </summary>
        [Output("linkData")]
        public Output<Outputs.FileLinkData?> LinkData { get; private set; } = null!;

        /// <summary>
        /// List(Resource). A list of [file links](https://stripe.com/docs/api/files/object#file_links) that point at this file.
        /// Please see details of links.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.FileLink>> Links { get; private set; } = null!;

        /// <summary>
        /// String. String representing the object’s type. Objects of the same type share the same value.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// String. The purpose of the uploaded file. One of these values are accepted: `account_requirement`,
        /// `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`,
        /// `document_provider_identity_document`, `finance_report_run`, `identity_document`, `identity_document_downloadable`,
        /// `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, `terminal_reader_splashscreen`
        /// </summary>
        [Output("purpose")]
        public Output<string> Purpose { get; private set; } = null!;

        /// <summary>
        /// Int. The size of the file object in bytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// String. The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// String. The publicly accessible URL to download the file.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a File resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public File(string name, FileArgs args, CustomResourceOptions? options = null)
            : base("stripe:index/file:File", name, args ?? new FileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private File(string name, Input<string> id, FileState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/file:File", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/georgegebbett",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing File resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static File Get(string name, Input<string> id, FileState? state = null, CustomResourceOptions? options = null)
        {
            return new File(name, id, state, options);
        }
    }

    public sealed class FileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A content file to upload encoded by base64.
        /// </summary>
        [Input("base64content", required: true)]
        public Input<string> Base64content { get; set; } = null!;

        /// <summary>
        /// String. The suitable name for saving the file to a filesystem.
        /// </summary>
        [Input("filename", required: true)]
        public Input<string> Filename { get; set; } = null!;

        /// <summary>
        /// Optional parameters that automatically create a file link for the newly created file.
        /// </summary>
        [Input("linkData")]
        public Input<Inputs.FileLinkDataArgs>? LinkData { get; set; }

        /// <summary>
        /// String. The purpose of the uploaded file. One of these values are accepted: `account_requirement`,
        /// `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`,
        /// `document_provider_identity_document`, `finance_report_run`, `identity_document`, `identity_document_downloadable`,
        /// `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, `terminal_reader_splashscreen`
        /// </summary>
        [Input("purpose", required: true)]
        public Input<string> Purpose { get; set; } = null!;

        public FileArgs()
        {
        }
        public static new FileArgs Empty => new FileArgs();
    }

    public sealed class FileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A content file to upload encoded by base64.
        /// </summary>
        [Input("base64content")]
        public Input<string>? Base64content { get; set; }

        /// <summary>
        /// String. Time at which the object was created. Measured in seconds since the Unix epoch.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// Int. The link isn’t available after this future timestamp.
        /// </summary>
        [Input("expiresAt")]
        public Input<int>? ExpiresAt { get; set; }

        /// <summary>
        /// String. The suitable name for saving the file to a filesystem.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// Optional parameters that automatically create a file link for the newly created file.
        /// </summary>
        [Input("linkData")]
        public Input<Inputs.FileLinkDataGetArgs>? LinkData { get; set; }

        [Input("links")]
        private InputList<Inputs.FileLinkGetArgs>? _links;

        /// <summary>
        /// List(Resource). A list of [file links](https://stripe.com/docs/api/files/object#file_links) that point at this file.
        /// Please see details of links.
        /// </summary>
        public InputList<Inputs.FileLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.FileLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// String. String representing the object’s type. Objects of the same type share the same value.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// String. The purpose of the uploaded file. One of these values are accepted: `account_requirement`,
        /// `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`,
        /// `document_provider_identity_document`, `finance_report_run`, `identity_document`, `identity_document_downloadable`,
        /// `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, `terminal_reader_splashscreen`
        /// </summary>
        [Input("purpose")]
        public Input<string>? Purpose { get; set; }

        /// <summary>
        /// Int. The size of the file object in bytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// String. The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// String. The publicly accessible URL to download the file.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public FileState()
        {
        }
        public static new FileState Empty => new FileState();
    }
}
