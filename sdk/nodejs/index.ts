// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CardArgs, CardState } from "./card";
export type Card = import("./card").Card;
export const Card: typeof import("./card").Card = null as any;
utilities.lazyLoad(exports, ["Card"], () => require("./card"));

export { CouponArgs, CouponState } from "./coupon";
export type Coupon = import("./coupon").Coupon;
export const Coupon: typeof import("./coupon").Coupon = null as any;
utilities.lazyLoad(exports, ["Coupon"], () => require("./coupon"));

export { CustomerArgs, CustomerState } from "./customer";
export type Customer = import("./customer").Customer;
export const Customer: typeof import("./customer").Customer = null as any;
utilities.lazyLoad(exports, ["Customer"], () => require("./customer"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { PortalConfigurationArgs, PortalConfigurationState } from "./portalConfiguration";
export type PortalConfiguration = import("./portalConfiguration").PortalConfiguration;
export const PortalConfiguration: typeof import("./portalConfiguration").PortalConfiguration = null as any;
utilities.lazyLoad(exports, ["PortalConfiguration"], () => require("./portalConfiguration"));

export { PriceArgs, PriceState } from "./price";
export type Price = import("./price").Price;
export const Price: typeof import("./price").Price = null as any;
utilities.lazyLoad(exports, ["Price"], () => require("./price"));

export { ProductArgs, ProductState } from "./product";
export type Product = import("./product").Product;
export const Product: typeof import("./product").Product = null as any;
utilities.lazyLoad(exports, ["Product"], () => require("./product"));

export { PromotionCodeArgs, PromotionCodeState } from "./promotionCode";
export type PromotionCode = import("./promotionCode").PromotionCode;
export const PromotionCode: typeof import("./promotionCode").PromotionCode = null as any;
utilities.lazyLoad(exports, ["PromotionCode"], () => require("./promotionCode"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ShippingRateArgs, ShippingRateState } from "./shippingRate";
export type ShippingRate = import("./shippingRate").ShippingRate;
export const ShippingRate: typeof import("./shippingRate").ShippingRate = null as any;
utilities.lazyLoad(exports, ["ShippingRate"], () => require("./shippingRate"));

export { TaxRateArgs, TaxRateState } from "./taxRate";
export type TaxRate = import("./taxRate").TaxRate;
export const TaxRate: typeof import("./taxRate").TaxRate = null as any;
utilities.lazyLoad(exports, ["TaxRate"], () => require("./taxRate"));

export { WebhookEndpointArgs, WebhookEndpointState } from "./webhookEndpoint";
export type WebhookEndpoint = import("./webhookEndpoint").WebhookEndpoint;
export const WebhookEndpoint: typeof import("./webhookEndpoint").WebhookEndpoint = null as any;
utilities.lazyLoad(exports, ["WebhookEndpoint"], () => require("./webhookEndpoint"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "stripe:index/card:Card":
                return new Card(name, <any>undefined, { urn })
            case "stripe:index/coupon:Coupon":
                return new Coupon(name, <any>undefined, { urn })
            case "stripe:index/customer:Customer":
                return new Customer(name, <any>undefined, { urn })
            case "stripe:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "stripe:index/portalConfiguration:PortalConfiguration":
                return new PortalConfiguration(name, <any>undefined, { urn })
            case "stripe:index/price:Price":
                return new Price(name, <any>undefined, { urn })
            case "stripe:index/product:Product":
                return new Product(name, <any>undefined, { urn })
            case "stripe:index/promotionCode:PromotionCode":
                return new PromotionCode(name, <any>undefined, { urn })
            case "stripe:index/shippingRate:ShippingRate":
                return new ShippingRate(name, <any>undefined, { urn })
            case "stripe:index/taxRate:TaxRate":
                return new TaxRate(name, <any>undefined, { urn })
            case "stripe:index/webhookEndpoint:WebhookEndpoint":
                return new WebhookEndpoint(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("stripe", "index/card", _module)
pulumi.runtime.registerResourceModule("stripe", "index/coupon", _module)
pulumi.runtime.registerResourceModule("stripe", "index/customer", _module)
pulumi.runtime.registerResourceModule("stripe", "index/file", _module)
pulumi.runtime.registerResourceModule("stripe", "index/portalConfiguration", _module)
pulumi.runtime.registerResourceModule("stripe", "index/price", _module)
pulumi.runtime.registerResourceModule("stripe", "index/product", _module)
pulumi.runtime.registerResourceModule("stripe", "index/promotionCode", _module)
pulumi.runtime.registerResourceModule("stripe", "index/shippingRate", _module)
pulumi.runtime.registerResourceModule("stripe", "index/taxRate", _module)
pulumi.runtime.registerResourceModule("stripe", "index/webhookEndpoint", _module)
pulumi.runtime.registerResourcePackage("stripe", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:stripe") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
