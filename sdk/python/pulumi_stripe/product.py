# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProductArgs', 'Product']

@pulumi.input_type
class ProductArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 shippable: Optional[pulumi.Input[bool]] = None,
                 statement_descriptor: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 unit_label: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Product resource.
        :param pulumi.Input[bool] active: Bool. Whether the product is currently available for purchase. Defaults to `true`.
        :param pulumi.Input[str] description: String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        :param pulumi.Input[str] name: String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        :param pulumi.Input[Mapping[str, pulumi.Input[float]]] package_dimensions: Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        :param pulumi.Input[str] product_id: String. The bespoke unique identifier for the object.
        :param pulumi.Input[bool] shippable: Bool. Whether this product is shipped (i.e., physical goods).
        :param pulumi.Input[str] statement_descriptor: String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        :param pulumi.Input[str] tax_code: String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        :param pulumi.Input[str] unit_label: String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        :param pulumi.Input[str] url: String. A URL of a publicly-accessible webpage for this product.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if package_dimensions is not None:
            pulumi.set(__self__, "package_dimensions", package_dimensions)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if shippable is not None:
            pulumi.set(__self__, "shippable", shippable)
        if statement_descriptor is not None:
            pulumi.set(__self__, "statement_descriptor", statement_descriptor)
        if tax_code is not None:
            pulumi.set(__self__, "tax_code", tax_code)
        if unit_label is not None:
            pulumi.set(__self__, "unit_label", unit_label)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the product is currently available for purchase. Defaults to `true`.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageDimensions")
    def package_dimensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        """
        Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        """
        return pulumi.get(self, "package_dimensions")

    @package_dimensions.setter
    def package_dimensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "package_dimensions", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        String. The bespoke unique identifier for the object.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def shippable(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether this product is shipped (i.e., physical goods).
        """
        return pulumi.get(self, "shippable")

    @shippable.setter
    def shippable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shippable", value)

    @property
    @pulumi.getter(name="statementDescriptor")
    def statement_descriptor(self) -> Optional[pulumi.Input[str]]:
        """
        String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        """
        return pulumi.get(self, "statement_descriptor")

    @statement_descriptor.setter
    def statement_descriptor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement_descriptor", value)

    @property
    @pulumi.getter(name="taxCode")
    def tax_code(self) -> Optional[pulumi.Input[str]]:
        """
        String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        """
        return pulumi.get(self, "tax_code")

    @tax_code.setter
    def tax_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_code", value)

    @property
    @pulumi.getter(name="unitLabel")
    def unit_label(self) -> Optional[pulumi.Input[str]]:
        """
        String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        """
        return pulumi.get(self, "unit_label")

    @unit_label.setter
    def unit_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_label", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        String. A URL of a publicly-accessible webpage for this product.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _ProductState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 shippable: Optional[pulumi.Input[bool]] = None,
                 statement_descriptor: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 unit_label: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Product resources.
        :param pulumi.Input[bool] active: Bool. Whether the product is currently available for purchase. Defaults to `true`.
        :param pulumi.Input[str] description: String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        :param pulumi.Input[str] name: String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        :param pulumi.Input[Mapping[str, pulumi.Input[float]]] package_dimensions: Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        :param pulumi.Input[str] product_id: String. The bespoke unique identifier for the object.
        :param pulumi.Input[bool] shippable: Bool. Whether this product is shipped (i.e., physical goods).
        :param pulumi.Input[str] statement_descriptor: String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        :param pulumi.Input[str] tax_code: String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        :param pulumi.Input[str] unit_label: String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        :param pulumi.Input[str] url: String. A URL of a publicly-accessible webpage for this product.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if package_dimensions is not None:
            pulumi.set(__self__, "package_dimensions", package_dimensions)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if shippable is not None:
            pulumi.set(__self__, "shippable", shippable)
        if statement_descriptor is not None:
            pulumi.set(__self__, "statement_descriptor", statement_descriptor)
        if tax_code is not None:
            pulumi.set(__self__, "tax_code", tax_code)
        if unit_label is not None:
            pulumi.set(__self__, "unit_label", unit_label)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the product is currently available for purchase. Defaults to `true`.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageDimensions")
    def package_dimensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        """
        Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        """
        return pulumi.get(self, "package_dimensions")

    @package_dimensions.setter
    def package_dimensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "package_dimensions", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        String. The bespoke unique identifier for the object.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def shippable(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether this product is shipped (i.e., physical goods).
        """
        return pulumi.get(self, "shippable")

    @shippable.setter
    def shippable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shippable", value)

    @property
    @pulumi.getter(name="statementDescriptor")
    def statement_descriptor(self) -> Optional[pulumi.Input[str]]:
        """
        String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        """
        return pulumi.get(self, "statement_descriptor")

    @statement_descriptor.setter
    def statement_descriptor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement_descriptor", value)

    @property
    @pulumi.getter(name="taxCode")
    def tax_code(self) -> Optional[pulumi.Input[str]]:
        """
        String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        """
        return pulumi.get(self, "tax_code")

    @tax_code.setter
    def tax_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_code", value)

    @property
    @pulumi.getter(name="unitLabel")
    def unit_label(self) -> Optional[pulumi.Input[str]]:
        """
        String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        """
        return pulumi.get(self, "unit_label")

    @unit_label.setter
    def unit_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_label", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        String. A URL of a publicly-accessible webpage for this product.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Product(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 shippable: Optional[pulumi.Input[bool]] = None,
                 statement_descriptor: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 unit_label: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        With this resource, you can create a product - [Stripe API product documentation](https://stripe.com/docs/api/products).

        Products describe the specific goods or services you offer to your customers. For example,
        you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        # the most basic product
        product = stripe.Product("product",
            description="fantastic product",
            unit_label="piece",
            url="https://www.terraform.io")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Whether the product is currently available for purchase. Defaults to `true`.
        :param pulumi.Input[str] description: String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        :param pulumi.Input[str] name: String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        :param pulumi.Input[Mapping[str, pulumi.Input[float]]] package_dimensions: Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        :param pulumi.Input[str] product_id: String. The bespoke unique identifier for the object.
        :param pulumi.Input[bool] shippable: Bool. Whether this product is shipped (i.e., physical goods).
        :param pulumi.Input[str] statement_descriptor: String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        :param pulumi.Input[str] tax_code: String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        :param pulumi.Input[str] unit_label: String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        :param pulumi.Input[str] url: String. A URL of a publicly-accessible webpage for this product.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProductArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        With this resource, you can create a product - [Stripe API product documentation](https://stripe.com/docs/api/products).

        Products describe the specific goods or services you offer to your customers. For example,
        you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        # the most basic product
        product = stripe.Product("product",
            description="fantastic product",
            unit_label="piece",
            url="https://www.terraform.io")
        ```

        :param str resource_name: The name of the resource.
        :param ProductArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProductArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 shippable: Optional[pulumi.Input[bool]] = None,
                 statement_descriptor: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 unit_label: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProductArgs.__new__(ProductArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["description"] = description
            __props__.__dict__["features"] = features
            __props__.__dict__["images"] = images
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["package_dimensions"] = package_dimensions
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["shippable"] = shippable
            __props__.__dict__["statement_descriptor"] = statement_descriptor
            __props__.__dict__["tax_code"] = tax_code
            __props__.__dict__["unit_label"] = unit_label
            __props__.__dict__["url"] = url
        super(Product, __self__).__init__(
            'stripe:index/product:Product',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            package_dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
            product_id: Optional[pulumi.Input[str]] = None,
            shippable: Optional[pulumi.Input[bool]] = None,
            statement_descriptor: Optional[pulumi.Input[str]] = None,
            tax_code: Optional[pulumi.Input[str]] = None,
            unit_label: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Product':
        """
        Get an existing Product resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Whether the product is currently available for purchase. Defaults to `true`.
        :param pulumi.Input[str] description: String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        :param pulumi.Input[str] name: String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        :param pulumi.Input[Mapping[str, pulumi.Input[float]]] package_dimensions: Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        :param pulumi.Input[str] product_id: String. The bespoke unique identifier for the object.
        :param pulumi.Input[bool] shippable: Bool. Whether this product is shipped (i.e., physical goods).
        :param pulumi.Input[str] statement_descriptor: String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        :param pulumi.Input[str] tax_code: String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        :param pulumi.Input[str] unit_label: String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        :param pulumi.Input[str] url: String. A URL of a publicly-accessible webpage for this product.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProductState.__new__(_ProductState)

        __props__.__dict__["active"] = active
        __props__.__dict__["description"] = description
        __props__.__dict__["features"] = features
        __props__.__dict__["images"] = images
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["package_dimensions"] = package_dimensions
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["shippable"] = shippable
        __props__.__dict__["statement_descriptor"] = statement_descriptor
        __props__.__dict__["tax_code"] = tax_code
        __props__.__dict__["unit_label"] = unit_label
        __props__.__dict__["url"] = url
        return Product(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Bool. Whether the product is currently available for purchase. Defaults to `true`.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        String. The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List(String). A list of up to 15 features for this product. These are displayed in pricing tables.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def images(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List(String). A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        String. The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageDimensions")
    def package_dimensions(self) -> pulumi.Output[Optional[Mapping[str, float]]]:
        """
        Map(Float). The dimensions of this product for shipping purposes. When used these fields are required: `height`,`length`,`width` and `weight`; the precision is 2 decimal places.
        """
        return pulumi.get(self, "package_dimensions")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[str]:
        """
        String. The bespoke unique identifier for the object.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def shippable(self) -> pulumi.Output[Optional[bool]]:
        """
        Bool. Whether this product is shipped (i.e., physical goods).
        """
        return pulumi.get(self, "shippable")

    @property
    @pulumi.getter(name="statementDescriptor")
    def statement_descriptor(self) -> pulumi.Output[Optional[str]]:
        """
        String. An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement description may not include `<`,` >`, `\\`, `"`, `’` characters, and will appear on your customer’s statement in capital letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        """
        return pulumi.get(self, "statement_descriptor")

    @property
    @pulumi.getter(name="taxCode")
    def tax_code(self) -> pulumi.Output[Optional[str]]:
        """
        String. A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        """
        return pulumi.get(self, "tax_code")

    @property
    @pulumi.getter(name="unitLabel")
    def unit_label(self) -> pulumi.Output[Optional[str]]:
        """
        String. A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
        """
        return pulumi.get(self, "unit_label")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        String. A URL of a publicly-accessible webpage for this product.
        """
        return pulumi.get(self, "url")

