# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ShippingRateArgs', 'ShippingRate']

@pulumi.input_type
class ShippingRateArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 fixed_amount: pulumi.Input['ShippingRateFixedAmountArgs'],
                 active: Optional[pulumi.Input[bool]] = None,
                 delivery_estimates: Optional[pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tax_behavior: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ShippingRate resource.
        :param pulumi.Input[str] display_name: String. The name of the shipping rate, meant to be displayable to the customer. 
               This will appear on CheckoutSessions.
        :param pulumi.Input['ShippingRateFixedAmountArgs'] fixed_amount: List(Resource). Describes a fixed amount to charge for shipping. 
               Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        :param pulumi.Input[bool] active: Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]] delivery_estimates: List(Resource). The estimated range for how long shipping will take, 
               meant to be displayable to the customer. This will appear on CheckoutSessions.
               For details please see Delivery Estimate.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
               storing additional information about the object in a structured format.
        :param pulumi.Input[str] tax_behavior: Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
               unspecified.
        :param pulumi.Input[str] tax_code: String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        :param pulumi.Input[str] type: String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fixed_amount", fixed_amount)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if delivery_estimates is not None:
            pulumi.set(__self__, "delivery_estimates", delivery_estimates)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tax_behavior is not None:
            pulumi.set(__self__, "tax_behavior", tax_behavior)
        if tax_code is not None:
            pulumi.set(__self__, "tax_code", tax_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        String. The name of the shipping rate, meant to be displayable to the customer. 
        This will appear on CheckoutSessions.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="fixedAmount")
    def fixed_amount(self) -> pulumi.Input['ShippingRateFixedAmountArgs']:
        """
        List(Resource). Describes a fixed amount to charge for shipping. 
        Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        """
        return pulumi.get(self, "fixed_amount")

    @fixed_amount.setter
    def fixed_amount(self, value: pulumi.Input['ShippingRateFixedAmountArgs']):
        pulumi.set(self, "fixed_amount", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="deliveryEstimates")
    def delivery_estimates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]]]:
        """
        List(Resource). The estimated range for how long shipping will take, 
        meant to be displayable to the customer. This will appear on CheckoutSessions.
        For details please see Delivery Estimate.
        """
        return pulumi.get(self, "delivery_estimates")

    @delivery_estimates.setter
    def delivery_estimates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]]]):
        pulumi.set(self, "delivery_estimates", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="taxBehavior")
    def tax_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        unspecified.
        """
        return pulumi.get(self, "tax_behavior")

    @tax_behavior.setter
    def tax_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_behavior", value)

    @property
    @pulumi.getter(name="taxCode")
    def tax_code(self) -> Optional[pulumi.Input[str]]:
        """
        String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        """
        return pulumi.get(self, "tax_code")

    @tax_code.setter
    def tax_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ShippingRateState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 delivery_estimates: Optional[pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 fixed_amount: Optional[pulumi.Input['ShippingRateFixedAmountArgs']] = None,
                 livemode: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tax_behavior: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ShippingRate resources.
        :param pulumi.Input[bool] active: Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]] delivery_estimates: List(Resource). The estimated range for how long shipping will take, 
               meant to be displayable to the customer. This will appear on CheckoutSessions.
               For details please see Delivery Estimate.
        :param pulumi.Input[str] display_name: String. The name of the shipping rate, meant to be displayable to the customer. 
               This will appear on CheckoutSessions.
        :param pulumi.Input['ShippingRateFixedAmountArgs'] fixed_amount: List(Resource). Describes a fixed amount to charge for shipping. 
               Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        :param pulumi.Input[bool] livemode: Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
               storing additional information about the object in a structured format.
        :param pulumi.Input[str] tax_behavior: Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
               unspecified.
        :param pulumi.Input[str] tax_code: String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        :param pulumi.Input[str] type: String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if delivery_estimates is not None:
            pulumi.set(__self__, "delivery_estimates", delivery_estimates)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fixed_amount is not None:
            pulumi.set(__self__, "fixed_amount", fixed_amount)
        if livemode is not None:
            pulumi.set(__self__, "livemode", livemode)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tax_behavior is not None:
            pulumi.set(__self__, "tax_behavior", tax_behavior)
        if tax_code is not None:
            pulumi.set(__self__, "tax_code", tax_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="deliveryEstimates")
    def delivery_estimates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]]]:
        """
        List(Resource). The estimated range for how long shipping will take, 
        meant to be displayable to the customer. This will appear on CheckoutSessions.
        For details please see Delivery Estimate.
        """
        return pulumi.get(self, "delivery_estimates")

    @delivery_estimates.setter
    def delivery_estimates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShippingRateDeliveryEstimateArgs']]]]):
        pulumi.set(self, "delivery_estimates", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        String. The name of the shipping rate, meant to be displayable to the customer. 
        This will appear on CheckoutSessions.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="fixedAmount")
    def fixed_amount(self) -> Optional[pulumi.Input['ShippingRateFixedAmountArgs']]:
        """
        List(Resource). Describes a fixed amount to charge for shipping. 
        Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        """
        return pulumi.get(self, "fixed_amount")

    @fixed_amount.setter
    def fixed_amount(self, value: Optional[pulumi.Input['ShippingRateFixedAmountArgs']]):
        pulumi.set(self, "fixed_amount", value)

    @property
    @pulumi.getter
    def livemode(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        """
        return pulumi.get(self, "livemode")

    @livemode.setter
    def livemode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "livemode", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="taxBehavior")
    def tax_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        unspecified.
        """
        return pulumi.get(self, "tax_behavior")

    @tax_behavior.setter
    def tax_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_behavior", value)

    @property
    @pulumi.getter(name="taxCode")
    def tax_code(self) -> Optional[pulumi.Input[str]]:
        """
        String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        """
        return pulumi.get(self, "tax_code")

    @tax_code.setter
    def tax_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ShippingRate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 delivery_estimates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShippingRateDeliveryEstimateArgs']]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 fixed_amount: Optional[pulumi.Input[pulumi.InputType['ShippingRateFixedAmountArgs']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tax_behavior: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        With this resource, you can create a shipping rate - [Stripe API shipping rate documentation](https://stripe.com/docs/api/shipping_rates).

        Shipping rates let you display various shipping options—like standard, express, and overnight—with more accurate delivery estimates.
        Charge your customer for shipping using different Stripe products, some of which require coding.

        > Removal of the shipping rate isn't supported through the Stripe SDK. The best practice, which this provider follows,
        is to archive the shipping rate by marking it as inactive on destroy, which indicates that the shipping rate is no longer
        available.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        # shipping rate with delivery estimate
        shipping_rate = stripe.ShippingRate("shippingRate",
            delivery_estimates=[stripe.ShippingRateDeliveryEstimateArgs(
                maximum=stripe.ShippingRateDeliveryEstimateMaximumArgs(
                    unit="day",
                    value=4,
                ),
                minimum=stripe.ShippingRateDeliveryEstimateMinimumArgs(
                    unit="hour",
                    value=24,
                ),
            )],
            display_name="shipping rate",
            fixed_amount=stripe.ShippingRateFixedAmountArgs(
                amount=1000,
                currency="aud",
            ))
        # shipping rate with currency options
        # !!! Currency options have to be sorted alphabetically 
        # !!! by the currency field
        shipping = stripe.ShippingRate("shipping",
            display_name="shipping rate",
            fixed_amount=stripe.ShippingRateFixedAmountArgs(
                amount=1000,
                currency="aud",
                currency_options=[
                    stripe.ShippingRateFixedAmountCurrencyOptionArgs(
                        amount=350,
                        currency="eur",
                    ),
                    stripe.ShippingRateFixedAmountCurrencyOptionArgs(
                        amount=500,
                        currency="usd",
                    ),
                ],
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShippingRateDeliveryEstimateArgs']]]] delivery_estimates: List(Resource). The estimated range for how long shipping will take, 
               meant to be displayable to the customer. This will appear on CheckoutSessions.
               For details please see Delivery Estimate.
        :param pulumi.Input[str] display_name: String. The name of the shipping rate, meant to be displayable to the customer. 
               This will appear on CheckoutSessions.
        :param pulumi.Input[pulumi.InputType['ShippingRateFixedAmountArgs']] fixed_amount: List(Resource). Describes a fixed amount to charge for shipping. 
               Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
               storing additional information about the object in a structured format.
        :param pulumi.Input[str] tax_behavior: Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
               unspecified.
        :param pulumi.Input[str] tax_code: String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        :param pulumi.Input[str] type: String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ShippingRateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        With this resource, you can create a shipping rate - [Stripe API shipping rate documentation](https://stripe.com/docs/api/shipping_rates).

        Shipping rates let you display various shipping options—like standard, express, and overnight—with more accurate delivery estimates.
        Charge your customer for shipping using different Stripe products, some of which require coding.

        > Removal of the shipping rate isn't supported through the Stripe SDK. The best practice, which this provider follows,
        is to archive the shipping rate by marking it as inactive on destroy, which indicates that the shipping rate is no longer
        available.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        # shipping rate with delivery estimate
        shipping_rate = stripe.ShippingRate("shippingRate",
            delivery_estimates=[stripe.ShippingRateDeliveryEstimateArgs(
                maximum=stripe.ShippingRateDeliveryEstimateMaximumArgs(
                    unit="day",
                    value=4,
                ),
                minimum=stripe.ShippingRateDeliveryEstimateMinimumArgs(
                    unit="hour",
                    value=24,
                ),
            )],
            display_name="shipping rate",
            fixed_amount=stripe.ShippingRateFixedAmountArgs(
                amount=1000,
                currency="aud",
            ))
        # shipping rate with currency options
        # !!! Currency options have to be sorted alphabetically 
        # !!! by the currency field
        shipping = stripe.ShippingRate("shipping",
            display_name="shipping rate",
            fixed_amount=stripe.ShippingRateFixedAmountArgs(
                amount=1000,
                currency="aud",
                currency_options=[
                    stripe.ShippingRateFixedAmountCurrencyOptionArgs(
                        amount=350,
                        currency="eur",
                    ),
                    stripe.ShippingRateFixedAmountCurrencyOptionArgs(
                        amount=500,
                        currency="usd",
                    ),
                ],
            ))
        ```

        :param str resource_name: The name of the resource.
        :param ShippingRateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ShippingRateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 delivery_estimates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShippingRateDeliveryEstimateArgs']]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 fixed_amount: Optional[pulumi.Input[pulumi.InputType['ShippingRateFixedAmountArgs']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tax_behavior: Optional[pulumi.Input[str]] = None,
                 tax_code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ShippingRateArgs.__new__(ShippingRateArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["delivery_estimates"] = delivery_estimates
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if fixed_amount is None and not opts.urn:
                raise TypeError("Missing required property 'fixed_amount'")
            __props__.__dict__["fixed_amount"] = fixed_amount
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["tax_behavior"] = tax_behavior
            __props__.__dict__["tax_code"] = tax_code
            __props__.__dict__["type"] = type
            __props__.__dict__["livemode"] = None
        super(ShippingRate, __self__).__init__(
            'stripe:index/shippingRate:ShippingRate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            delivery_estimates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShippingRateDeliveryEstimateArgs']]]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            fixed_amount: Optional[pulumi.Input[pulumi.InputType['ShippingRateFixedAmountArgs']]] = None,
            livemode: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tax_behavior: Optional[pulumi.Input[str]] = None,
            tax_code: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ShippingRate':
        """
        Get an existing ShippingRate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShippingRateDeliveryEstimateArgs']]]] delivery_estimates: List(Resource). The estimated range for how long shipping will take, 
               meant to be displayable to the customer. This will appear on CheckoutSessions.
               For details please see Delivery Estimate.
        :param pulumi.Input[str] display_name: String. The name of the shipping rate, meant to be displayable to the customer. 
               This will appear on CheckoutSessions.
        :param pulumi.Input[pulumi.InputType['ShippingRateFixedAmountArgs']] fixed_amount: List(Resource). Describes a fixed amount to charge for shipping. 
               Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        :param pulumi.Input[bool] livemode: Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
               storing additional information about the object in a structured format.
        :param pulumi.Input[str] tax_behavior: Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
               unspecified.
        :param pulumi.Input[str] tax_code: String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        :param pulumi.Input[str] type: String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ShippingRateState.__new__(_ShippingRateState)

        __props__.__dict__["active"] = active
        __props__.__dict__["delivery_estimates"] = delivery_estimates
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["fixed_amount"] = fixed_amount
        __props__.__dict__["livemode"] = livemode
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["tax_behavior"] = tax_behavior
        __props__.__dict__["tax_code"] = tax_code
        __props__.__dict__["type"] = type
        return ShippingRate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="deliveryEstimates")
    def delivery_estimates(self) -> pulumi.Output[Optional[Sequence['outputs.ShippingRateDeliveryEstimate']]]:
        """
        List(Resource). The estimated range for how long shipping will take, 
        meant to be displayable to the customer. This will appear on CheckoutSessions.
        For details please see Delivery Estimate.
        """
        return pulumi.get(self, "delivery_estimates")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        String. The name of the shipping rate, meant to be displayable to the customer. 
        This will appear on CheckoutSessions.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fixedAmount")
    def fixed_amount(self) -> pulumi.Output['outputs.ShippingRateFixedAmount']:
        """
        List(Resource). Describes a fixed amount to charge for shipping. 
        Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        """
        return pulumi.get(self, "fixed_amount")

    @property
    @pulumi.getter
    def livemode(self) -> pulumi.Output[bool]:
        """
        Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        """
        return pulumi.get(self, "livemode")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="taxBehavior")
    def tax_behavior(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        unspecified.
        """
        return pulumi.get(self, "tax_behavior")

    @property
    @pulumi.getter(name="taxCode")
    def tax_code(self) -> pulumi.Output[Optional[str]]:
        """
        String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        """
        return pulumi.get(self, "tax_code")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        """
        return pulumi.get(self, "type")

