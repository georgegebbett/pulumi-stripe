// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe.Outputs
{

    [OutputType]
    public sealed class FileLink
    {
        /// <summary>
        /// String. Time at which the object was created. Measured in seconds since the Unix epoch.
        /// </summary>
        public readonly int? Created;
        /// <summary>
        /// Bool. Returns if the link is already expired.
        /// </summary>
        public readonly bool? Expired;
        /// <summary>
        /// Int. The link isn’t available after this future timestamp.
        /// </summary>
        public readonly int? ExpiresAt;
        /// <summary>
        /// String. Unique identifier for the object.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Bool. Has the value `true` if the object exists in live mode or the value `false` 
        /// if the object exists in test mode.
        /// </summary>
        public readonly bool? Livemode;
        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. 
        /// This can be useful for storing additional information about the object in a structured format.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// String. String representing the object’s type. Objects of the same type share the same value.
        /// </summary>
        public readonly string? Object;
        /// <summary>
        /// String. The publicly accessible URL to download the file.
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private FileLink(
            int? created,

            bool? expired,

            int? expiresAt,

            string? id,

            bool? livemode,

            ImmutableDictionary<string, string>? metadata,

            string? @object,

            string? url)
        {
            Created = created;
            Expired = expired;
            ExpiresAt = expiresAt;
            Id = id;
            Livemode = livemode;
            Metadata = metadata;
            Object = @object;
            Url = url;
        }
    }
}
