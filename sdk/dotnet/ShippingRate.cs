// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    /// <summary>
    /// With this resource, you can create a shipping rate - [Stripe API shipping rate documentation](https://stripe.com/docs/api/shipping_rates).
    /// 
    /// Shipping rates let you display various shipping options—like standard, express, and overnight—with more accurate delivery estimates.
    /// Charge your customer for shipping using different Stripe products, some of which require coding.
    /// 
    /// &gt; Removal of the shipping rate isn't supported through the Stripe SDK. The best practice, which this provider follows,
    /// is to archive the shipping rate by marking it as inactive on destroy, which indicates that the shipping rate is no longer
    /// available.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Stripe = Pulumi.Stripe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // shipping rate with delivery estimate
    ///     var shippingRate = new Stripe.ShippingRate("shippingRate", new()
    ///     {
    ///         DeliveryEstimates = new[]
    ///         {
    ///             new Stripe.Inputs.ShippingRateDeliveryEstimateArgs
    ///             {
    ///                 Maximum = new Stripe.Inputs.ShippingRateDeliveryEstimateMaximumArgs
    ///                 {
    ///                     Unit = "day",
    ///                     Value = 4,
    ///                 },
    ///                 Minimum = new Stripe.Inputs.ShippingRateDeliveryEstimateMinimumArgs
    ///                 {
    ///                     Unit = "hour",
    ///                     Value = 24,
    ///                 },
    ///             },
    ///         },
    ///         DisplayName = "shipping rate",
    ///         FixedAmount = new Stripe.Inputs.ShippingRateFixedAmountArgs
    ///         {
    ///             Amount = 1000,
    ///             Currency = "aud",
    ///         },
    ///     });
    /// 
    ///     // shipping rate with currency options
    ///     // !!! Currency options have to be sorted alphabetically 
    ///     // !!! by the currency field
    ///     var shipping = new Stripe.ShippingRate("shipping", new()
    ///     {
    ///         DisplayName = "shipping rate",
    ///         FixedAmount = new Stripe.Inputs.ShippingRateFixedAmountArgs
    ///         {
    ///             Amount = 1000,
    ///             Currency = "aud",
    ///             CurrencyOptions = new[]
    ///             {
    ///                 new Stripe.Inputs.ShippingRateFixedAmountCurrencyOptionArgs
    ///                 {
    ///                     Amount = 350,
    ///                     Currency = "eur",
    ///                 },
    ///                 new Stripe.Inputs.ShippingRateFixedAmountCurrencyOptionArgs
    ///                 {
    ///                     Amount = 500,
    ///                     Currency = "usd",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [StripeResourceType("stripe:index/shippingRate:ShippingRate")]
    public partial class ShippingRate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// List(Resource). The estimated range for how long shipping will take, 
        /// meant to be displayable to the customer. This will appear on CheckoutSessions.
        /// For details please see Delivery Estimate.
        /// </summary>
        [Output("deliveryEstimates")]
        public Output<ImmutableArray<Outputs.ShippingRateDeliveryEstimate>> DeliveryEstimates { get; private set; } = null!;

        /// <summary>
        /// String. The name of the shipping rate, meant to be displayable to the customer. 
        /// This will appear on CheckoutSessions.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Describes a fixed amount to charge for shipping. 
        /// Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        /// </summary>
        [Output("fixedAmount")]
        public Output<Outputs.ShippingRateFixedAmount> FixedAmount { get; private set; } = null!;

        /// <summary>
        /// Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        /// </summary>
        [Output("livemode")]
        public Output<bool> Livemode { get; private set; } = null!;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        /// unspecified.
        /// </summary>
        [Output("taxBehavior")]
        public Output<string?> TaxBehavior { get; private set; } = null!;

        /// <summary>
        /// String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        /// </summary>
        [Output("taxCode")]
        public Output<string?> TaxCode { get; private set; } = null!;

        /// <summary>
        /// String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ShippingRate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShippingRate(string name, ShippingRateArgs args, CustomResourceOptions? options = null)
            : base("stripe:index/shippingRate:ShippingRate", name, args ?? new ShippingRateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShippingRate(string name, Input<string> id, ShippingRateState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/shippingRate:ShippingRate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/georgegebbett",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShippingRate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShippingRate Get(string name, Input<string> id, ShippingRateState? state = null, CustomResourceOptions? options = null)
        {
            return new ShippingRate(name, id, state, options);
        }
    }

    public sealed class ShippingRateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("deliveryEstimates")]
        private InputList<Inputs.ShippingRateDeliveryEstimateArgs>? _deliveryEstimates;

        /// <summary>
        /// List(Resource). The estimated range for how long shipping will take, 
        /// meant to be displayable to the customer. This will appear on CheckoutSessions.
        /// For details please see Delivery Estimate.
        /// </summary>
        public InputList<Inputs.ShippingRateDeliveryEstimateArgs> DeliveryEstimates
        {
            get => _deliveryEstimates ?? (_deliveryEstimates = new InputList<Inputs.ShippingRateDeliveryEstimateArgs>());
            set => _deliveryEstimates = value;
        }

        /// <summary>
        /// String. The name of the shipping rate, meant to be displayable to the customer. 
        /// This will appear on CheckoutSessions.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// List(Resource). Describes a fixed amount to charge for shipping. 
        /// Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        /// </summary>
        [Input("fixedAmount", required: true)]
        public Input<Inputs.ShippingRateFixedAmountArgs> FixedAmount { get; set; } = null!;

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        /// unspecified.
        /// </summary>
        [Input("taxBehavior")]
        public Input<string>? TaxBehavior { get; set; }

        /// <summary>
        /// String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        /// </summary>
        [Input("taxCode")]
        public Input<string>? TaxCode { get; set; }

        /// <summary>
        /// String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ShippingRateArgs()
        {
        }
        public static new ShippingRateArgs Empty => new ShippingRateArgs();
    }

    public sealed class ShippingRateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bool. Whether the shipping rate is active (can't be used when creating). Defaults to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("deliveryEstimates")]
        private InputList<Inputs.ShippingRateDeliveryEstimateGetArgs>? _deliveryEstimates;

        /// <summary>
        /// List(Resource). The estimated range for how long shipping will take, 
        /// meant to be displayable to the customer. This will appear on CheckoutSessions.
        /// For details please see Delivery Estimate.
        /// </summary>
        public InputList<Inputs.ShippingRateDeliveryEstimateGetArgs> DeliveryEstimates
        {
            get => _deliveryEstimates ?? (_deliveryEstimates = new InputList<Inputs.ShippingRateDeliveryEstimateGetArgs>());
            set => _deliveryEstimates = value;
        }

        /// <summary>
        /// String. The name of the shipping rate, meant to be displayable to the customer. 
        /// This will appear on CheckoutSessions.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// List(Resource). Describes a fixed amount to charge for shipping. 
        /// Must be present if type is `fixed_amount`. For details of individual arguments see Fixed Amount.
        /// </summary>
        [Input("fixedAmount")]
        public Input<Inputs.ShippingRateFixedAmountGetArgs>? FixedAmount { get; set; }

        /// <summary>
        /// Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        /// </summary>
        [Input("livemode")]
        public Input<bool>? Livemode { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        /// unspecified.
        /// </summary>
        [Input("taxBehavior")]
        public Input<string>? TaxBehavior { get; set; }

        /// <summary>
        /// String. A tax code ID. The Shipping tax code is `txcd_92010001`.
        /// </summary>
        [Input("taxCode")]
        public Input<string>? TaxCode { get; set; }

        /// <summary>
        /// String. The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ShippingRateState()
        {
        }
        public static new ShippingRateState Empty => new ShippingRateState();
    }
}
