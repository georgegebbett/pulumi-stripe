// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stripe

import (
	"context"
	"reflect"

	"errors"
	"github.com/georgegebbett/pulumi-stripe/sdk/go/stripe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can create a Customer Portal Configuration - [Stripe API portal configuration documentation](https://stripe.com/docs/api/customer_portal/configuration).
//
// The Billing customer portal is a Stripe-hosted UI for subscription and billing management.
//
// A portal configuration describes the functionality and features that you want to provide to your customers through the portal.
//
// > Removal of the Customer Portal isn't supported through the Stripe SDK. The best practice, which this provider follows,
// is to deactivate the Customer Portal by marking it as inactive on destroy, which indicates that resource is no longer
// available.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/georgegebbett/pulumi-stripe/sdk/go/stripe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// A billing portal using all the available options
//			_, err := stripe.NewPortalConfiguration(ctx, "portalConfiguration", &stripe.PortalConfigurationArgs{
//				BusinessProfile: &stripe.PortalConfigurationBusinessProfileArgs{
//					Headline:          pulumi.String("My special headline"),
//					PrivacyPolicyUrl:  pulumi.String("https://example.com/privacy"),
//					TermsOfServiceUrl: pulumi.String("https://example.com/terms"),
//				},
//				DefaultReturnUrl: pulumi.String("https://example.com/special_headline"),
//				Features: &stripe.PortalConfigurationFeaturesArgs{
//					CustomerUpdate: &stripe.PortalConfigurationFeaturesCustomerUpdateArgs{
//						AllowedUpdates: pulumi.StringArray{
//							pulumi.String("email"),
//							pulumi.String("address"),
//							pulumi.String("shipping"),
//							pulumi.String("phone"),
//							pulumi.String("tax_id"),
//						},
//						Enabled: pulumi.Bool(true),
//					},
//					InvoiceHistory: &stripe.PortalConfigurationFeaturesInvoiceHistoryArgs{
//						Enabled: pulumi.Bool(true),
//					},
//					PaymentMethodUpdate: &stripe.PortalConfigurationFeaturesPaymentMethodUpdateArgs{
//						Enabled: pulumi.Bool(true),
//					},
//					SubscriptionCancel: &stripe.PortalConfigurationFeaturesSubscriptionCancelArgs{
//						CancellationReason: &stripe.PortalConfigurationFeaturesSubscriptionCancelCancellationReasonArgs{
//							Enabled: pulumi.Bool(true),
//							Options: pulumi.StringArray{
//								pulumi.String("too_expensive"),
//								pulumi.String("missing_features"),
//								pulumi.String("switched_service"),
//								pulumi.String("unused"),
//								pulumi.String("customer_service"),
//								pulumi.String("too_complex"),
//								pulumi.String("low_quality"),
//								pulumi.String("other"),
//							},
//						},
//						Enabled:           pulumi.Bool(true),
//						Mode:              pulumi.String("at_period_end"),
//						ProrationBehavior: pulumi.String("none"),
//					},
//					SubscriptionPauses: stripe.PortalConfigurationFeaturesSubscriptionPauseArray{
//						&stripe.PortalConfigurationFeaturesSubscriptionPauseArgs{
//							Enabled: pulumi.Bool(true),
//						},
//					},
//					SubscriptionUpdates: stripe.PortalConfigurationFeaturesSubscriptionUpdateArray{
//						&stripe.PortalConfigurationFeaturesSubscriptionUpdateArgs{
//							DefaultAllowedUpdates: pulumi.StringArray{
//								pulumi.String("price"),
//								pulumi.String("quantity"),
//								pulumi.String("promotion_code"),
//							},
//							Enabled: pulumi.Bool(true),
//							Products: stripe.PortalConfigurationFeaturesSubscriptionUpdateProductArray{
//								&stripe.PortalConfigurationFeaturesSubscriptionUpdateProductArgs{
//									Prices: pulumi.StringArray{
//										pulumi.String("my_price_id1"),
//										pulumi.String("my_price_id2"),
//									},
//									Product: pulumi.String("my_product_id"),
//								},
//							},
//							ProrationBehavior: pulumi.String("none"),
//						},
//					},
//				},
//				Metadata: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type PortalConfiguration struct {
	pulumi.CustomResourceState

	// Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// List(Resource). The business information shown to customers in the portal. More details in Business Profile section
	BusinessProfile PortalConfigurationBusinessProfileOutput `pulumi:"businessProfile"`
	// String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
	DefaultReturnUrl pulumi.StringPtrOutput `pulumi:"defaultReturnUrl"`
	// List(Resource). Information about the features available in the portal. Feature section described in Feature section
	Features PortalConfigurationFeaturesOutput `pulumi:"features"`
	// Bool. Whether the configuration is the default.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// List(Resource). The hosted login page for this configuration. See details in Login Page Section.
	LoginPage PortalConfigurationLoginPageOutput `pulumi:"loginPage"`
	// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
}

// NewPortalConfiguration registers a new resource with the given unique name, arguments, and options.
func NewPortalConfiguration(ctx *pulumi.Context,
	name string, args *PortalConfigurationArgs, opts ...pulumi.ResourceOption) (*PortalConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusinessProfile == nil {
		return nil, errors.New("invalid value for required argument 'BusinessProfile'")
	}
	if args.Features == nil {
		return nil, errors.New("invalid value for required argument 'Features'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortalConfiguration
	err := ctx.RegisterResource("stripe:index/portalConfiguration:PortalConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortalConfiguration gets an existing PortalConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortalConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalConfigurationState, opts ...pulumi.ResourceOption) (*PortalConfiguration, error) {
	var resource PortalConfiguration
	err := ctx.ReadResource("stripe:index/portalConfiguration:PortalConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortalConfiguration resources.
type portalConfigurationState struct {
	// Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
	Active *bool `pulumi:"active"`
	// List(Resource). The business information shown to customers in the portal. More details in Business Profile section
	BusinessProfile *PortalConfigurationBusinessProfile `pulumi:"businessProfile"`
	// String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
	DefaultReturnUrl *string `pulumi:"defaultReturnUrl"`
	// List(Resource). Information about the features available in the portal. Feature section described in Feature section
	Features *PortalConfigurationFeatures `pulumi:"features"`
	// Bool. Whether the configuration is the default.
	IsDefault *bool `pulumi:"isDefault"`
	// List(Resource). The hosted login page for this configuration. See details in Login Page Section.
	LoginPage *PortalConfigurationLoginPage `pulumi:"loginPage"`
	// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
	Metadata map[string]string `pulumi:"metadata"`
}

type PortalConfigurationState struct {
	// Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
	Active pulumi.BoolPtrInput
	// List(Resource). The business information shown to customers in the portal. More details in Business Profile section
	BusinessProfile PortalConfigurationBusinessProfilePtrInput
	// String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
	DefaultReturnUrl pulumi.StringPtrInput
	// List(Resource). Information about the features available in the portal. Feature section described in Feature section
	Features PortalConfigurationFeaturesPtrInput
	// Bool. Whether the configuration is the default.
	IsDefault pulumi.BoolPtrInput
	// List(Resource). The hosted login page for this configuration. See details in Login Page Section.
	LoginPage PortalConfigurationLoginPagePtrInput
	// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
	Metadata pulumi.StringMapInput
}

func (PortalConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalConfigurationState)(nil)).Elem()
}

type portalConfigurationArgs struct {
	// Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
	Active *bool `pulumi:"active"`
	// List(Resource). The business information shown to customers in the portal. More details in Business Profile section
	BusinessProfile PortalConfigurationBusinessProfile `pulumi:"businessProfile"`
	// String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
	DefaultReturnUrl *string `pulumi:"defaultReturnUrl"`
	// List(Resource). Information about the features available in the portal. Feature section described in Feature section
	Features PortalConfigurationFeatures `pulumi:"features"`
	// List(Resource). The hosted login page for this configuration. See details in Login Page Section.
	LoginPage *PortalConfigurationLoginPage `pulumi:"loginPage"`
	// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
	Metadata map[string]string `pulumi:"metadata"`
}

// The set of arguments for constructing a PortalConfiguration resource.
type PortalConfigurationArgs struct {
	// Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
	Active pulumi.BoolPtrInput
	// List(Resource). The business information shown to customers in the portal. More details in Business Profile section
	BusinessProfile PortalConfigurationBusinessProfileInput
	// String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
	DefaultReturnUrl pulumi.StringPtrInput
	// List(Resource). Information about the features available in the portal. Feature section described in Feature section
	Features PortalConfigurationFeaturesInput
	// List(Resource). The hosted login page for this configuration. See details in Login Page Section.
	LoginPage PortalConfigurationLoginPagePtrInput
	// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
	Metadata pulumi.StringMapInput
}

func (PortalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalConfigurationArgs)(nil)).Elem()
}

type PortalConfigurationInput interface {
	pulumi.Input

	ToPortalConfigurationOutput() PortalConfigurationOutput
	ToPortalConfigurationOutputWithContext(ctx context.Context) PortalConfigurationOutput
}

func (*PortalConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalConfiguration)(nil)).Elem()
}

func (i *PortalConfiguration) ToPortalConfigurationOutput() PortalConfigurationOutput {
	return i.ToPortalConfigurationOutputWithContext(context.Background())
}

func (i *PortalConfiguration) ToPortalConfigurationOutputWithContext(ctx context.Context) PortalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalConfigurationOutput)
}

// PortalConfigurationArrayInput is an input type that accepts PortalConfigurationArray and PortalConfigurationArrayOutput values.
// You can construct a concrete instance of `PortalConfigurationArrayInput` via:
//
//	PortalConfigurationArray{ PortalConfigurationArgs{...} }
type PortalConfigurationArrayInput interface {
	pulumi.Input

	ToPortalConfigurationArrayOutput() PortalConfigurationArrayOutput
	ToPortalConfigurationArrayOutputWithContext(context.Context) PortalConfigurationArrayOutput
}

type PortalConfigurationArray []PortalConfigurationInput

func (PortalConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalConfiguration)(nil)).Elem()
}

func (i PortalConfigurationArray) ToPortalConfigurationArrayOutput() PortalConfigurationArrayOutput {
	return i.ToPortalConfigurationArrayOutputWithContext(context.Background())
}

func (i PortalConfigurationArray) ToPortalConfigurationArrayOutputWithContext(ctx context.Context) PortalConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalConfigurationArrayOutput)
}

// PortalConfigurationMapInput is an input type that accepts PortalConfigurationMap and PortalConfigurationMapOutput values.
// You can construct a concrete instance of `PortalConfigurationMapInput` via:
//
//	PortalConfigurationMap{ "key": PortalConfigurationArgs{...} }
type PortalConfigurationMapInput interface {
	pulumi.Input

	ToPortalConfigurationMapOutput() PortalConfigurationMapOutput
	ToPortalConfigurationMapOutputWithContext(context.Context) PortalConfigurationMapOutput
}

type PortalConfigurationMap map[string]PortalConfigurationInput

func (PortalConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalConfiguration)(nil)).Elem()
}

func (i PortalConfigurationMap) ToPortalConfigurationMapOutput() PortalConfigurationMapOutput {
	return i.ToPortalConfigurationMapOutputWithContext(context.Background())
}

func (i PortalConfigurationMap) ToPortalConfigurationMapOutputWithContext(ctx context.Context) PortalConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalConfigurationMapOutput)
}

type PortalConfigurationOutput struct{ *pulumi.OutputState }

func (PortalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalConfiguration)(nil)).Elem()
}

func (o PortalConfigurationOutput) ToPortalConfigurationOutput() PortalConfigurationOutput {
	return o
}

func (o PortalConfigurationOutput) ToPortalConfigurationOutputWithContext(ctx context.Context) PortalConfigurationOutput {
	return o
}

// Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
func (o PortalConfigurationOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// List(Resource). The business information shown to customers in the portal. More details in Business Profile section
func (o PortalConfigurationOutput) BusinessProfile() PortalConfigurationBusinessProfileOutput {
	return o.ApplyT(func(v *PortalConfiguration) PortalConfigurationBusinessProfileOutput { return v.BusinessProfile }).(PortalConfigurationBusinessProfileOutput)
}

// String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
func (o PortalConfigurationOutput) DefaultReturnUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.StringPtrOutput { return v.DefaultReturnUrl }).(pulumi.StringPtrOutput)
}

// List(Resource). Information about the features available in the portal. Feature section described in Feature section
func (o PortalConfigurationOutput) Features() PortalConfigurationFeaturesOutput {
	return o.ApplyT(func(v *PortalConfiguration) PortalConfigurationFeaturesOutput { return v.Features }).(PortalConfigurationFeaturesOutput)
}

// Bool. Whether the configuration is the default.
func (o PortalConfigurationOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// List(Resource). The hosted login page for this configuration. See details in Login Page Section.
func (o PortalConfigurationOutput) LoginPage() PortalConfigurationLoginPageOutput {
	return o.ApplyT(func(v *PortalConfiguration) PortalConfigurationLoginPageOutput { return v.LoginPage }).(PortalConfigurationLoginPageOutput)
}

// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
func (o PortalConfigurationOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

type PortalConfigurationArrayOutput struct{ *pulumi.OutputState }

func (PortalConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalConfiguration)(nil)).Elem()
}

func (o PortalConfigurationArrayOutput) ToPortalConfigurationArrayOutput() PortalConfigurationArrayOutput {
	return o
}

func (o PortalConfigurationArrayOutput) ToPortalConfigurationArrayOutputWithContext(ctx context.Context) PortalConfigurationArrayOutput {
	return o
}

func (o PortalConfigurationArrayOutput) Index(i pulumi.IntInput) PortalConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortalConfiguration {
		return vs[0].([]*PortalConfiguration)[vs[1].(int)]
	}).(PortalConfigurationOutput)
}

type PortalConfigurationMapOutput struct{ *pulumi.OutputState }

func (PortalConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalConfiguration)(nil)).Elem()
}

func (o PortalConfigurationMapOutput) ToPortalConfigurationMapOutput() PortalConfigurationMapOutput {
	return o
}

func (o PortalConfigurationMapOutput) ToPortalConfigurationMapOutputWithContext(ctx context.Context) PortalConfigurationMapOutput {
	return o
}

func (o PortalConfigurationMapOutput) MapIndex(k pulumi.StringInput) PortalConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortalConfiguration {
		return vs[0].(map[string]*PortalConfiguration)[vs[1].(string)]
	}).(PortalConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalConfigurationInput)(nil)).Elem(), &PortalConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalConfigurationArrayInput)(nil)).Elem(), PortalConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalConfigurationMapInput)(nil)).Elem(), PortalConfigurationMap{})
	pulumi.RegisterOutputType(PortalConfigurationOutput{})
	pulumi.RegisterOutputType(PortalConfigurationArrayOutput{})
	pulumi.RegisterOutputType(PortalConfigurationMapOutput{})
}
