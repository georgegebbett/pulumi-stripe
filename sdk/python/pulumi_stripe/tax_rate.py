# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TaxRateArgs', 'TaxRate']

@pulumi.input_type
class TaxRateArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 inclusive: pulumi.Input[bool],
                 percentage: pulumi.Input[float],
                 active: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 jurisdiction: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tax_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TaxRate resource.
        :param pulumi.Input[str] display_name: String. The display name of the tax rate, which will be shown to users.
        :param pulumi.Input[bool] inclusive: Bool. This specifies if the tax rate is inclusive or exclusive.
               * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        :param pulumi.Input[float] percentage: This represents the tax rate percent out of 100.
        :param pulumi.Input[bool] active: Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        :param pulumi.Input[str] country: String. Two-letter country code (ISO 3166-1 alpha-2).
        :param pulumi.Input[str] description: String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        :param pulumi.Input[str] jurisdiction: String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        :param pulumi.Input[str] state: String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        :param pulumi.Input[str] tax_type: String. The high-level tax type, such as vat or sales_tax.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "inclusive", inclusive)
        pulumi.set(__self__, "percentage", percentage)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if jurisdiction is not None:
            pulumi.set(__self__, "jurisdiction", jurisdiction)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tax_type is not None:
            pulumi.set(__self__, "tax_type", tax_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        String. The display name of the tax rate, which will be shown to users.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def inclusive(self) -> pulumi.Input[bool]:
        """
        Bool. This specifies if the tax rate is inclusive or exclusive.
        * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        """
        return pulumi.get(self, "inclusive")

    @inclusive.setter
    def inclusive(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inclusive", value)

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[float]:
        """
        This represents the tax rate percent out of 100.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        String. Two-letter country code (ISO 3166-1 alpha-2).
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def jurisdiction(self) -> Optional[pulumi.Input[str]]:
        """
        String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        """
        return pulumi.get(self, "jurisdiction")

    @jurisdiction.setter
    def jurisdiction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jurisdiction", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="taxType")
    def tax_type(self) -> Optional[pulumi.Input[str]]:
        """
        String. The high-level tax type, such as vat or sales_tax.
        """
        return pulumi.get(self, "tax_type")

    @tax_type.setter
    def tax_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_type", value)


@pulumi.input_type
class _TaxRateState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 inclusive: Optional[pulumi.Input[bool]] = None,
                 jurisdiction: Optional[pulumi.Input[str]] = None,
                 livemode: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 percentage: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tax_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TaxRate resources.
        :param pulumi.Input[bool] active: Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        :param pulumi.Input[str] country: String. Two-letter country code (ISO 3166-1 alpha-2).
        :param pulumi.Input[int] created: Int. Time at which the object was created. Measured in seconds since the Unix epoch.
        :param pulumi.Input[str] description: String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        :param pulumi.Input[str] display_name: String. The display name of the tax rate, which will be shown to users.
        :param pulumi.Input[bool] inclusive: Bool. This specifies if the tax rate is inclusive or exclusive.
               * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        :param pulumi.Input[str] jurisdiction: String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        :param pulumi.Input[bool] livemode: Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        :param pulumi.Input[str] object: String. String representing the object’s type. Objects of the same type share the same value.
        :param pulumi.Input[float] percentage: This represents the tax rate percent out of 100.
        :param pulumi.Input[str] state: String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        :param pulumi.Input[str] tax_type: String. The high-level tax type, such as vat or sales_tax.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if inclusive is not None:
            pulumi.set(__self__, "inclusive", inclusive)
        if jurisdiction is not None:
            pulumi.set(__self__, "jurisdiction", jurisdiction)
        if livemode is not None:
            pulumi.set(__self__, "livemode", livemode)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tax_type is not None:
            pulumi.set(__self__, "tax_type", tax_type)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        String. Two-letter country code (ISO 3166-1 alpha-2).
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[int]]:
        """
        Int. Time at which the object was created. Measured in seconds since the Unix epoch.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        String. The display name of the tax rate, which will be shown to users.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def inclusive(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. This specifies if the tax rate is inclusive or exclusive.
        * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        """
        return pulumi.get(self, "inclusive")

    @inclusive.setter
    def inclusive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inclusive", value)

    @property
    @pulumi.getter
    def jurisdiction(self) -> Optional[pulumi.Input[str]]:
        """
        String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        """
        return pulumi.get(self, "jurisdiction")

    @jurisdiction.setter
    def jurisdiction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jurisdiction", value)

    @property
    @pulumi.getter
    def livemode(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        """
        return pulumi.get(self, "livemode")

    @livemode.setter
    def livemode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "livemode", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        String. String representing the object’s type. Objects of the same type share the same value.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        This represents the tax rate percent out of 100.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="taxType")
    def tax_type(self) -> Optional[pulumi.Input[str]]:
        """
        String. The high-level tax type, such as vat or sales_tax.
        """
        return pulumi.get(self, "tax_type")

    @tax_type.setter
    def tax_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tax_type", value)


class TaxRate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 inclusive: Optional[pulumi.Input[bool]] = None,
                 jurisdiction: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 percentage: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tax_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        With this resource, you can create a tax rate - [Stripe API tax rate  documentation](https://stripe.com/docs/api/tax_rates).

        Tax rates can be applied to invoices, subscriptions and Checkout Sessions to collect tax.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        tax_rate = stripe.TaxRate("taxRate",
            active=True,
            country="AU",
            description="GST Australia",
            display_name="GST",
            inclusive=True,
            jurisdiction="AU",
            metadata={},
            percentage=10,
            state="",
            tax_type="")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        :param pulumi.Input[str] country: String. Two-letter country code (ISO 3166-1 alpha-2).
        :param pulumi.Input[str] description: String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        :param pulumi.Input[str] display_name: String. The display name of the tax rate, which will be shown to users.
        :param pulumi.Input[bool] inclusive: Bool. This specifies if the tax rate is inclusive or exclusive.
               * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        :param pulumi.Input[str] jurisdiction: String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        :param pulumi.Input[float] percentage: This represents the tax rate percent out of 100.
        :param pulumi.Input[str] state: String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        :param pulumi.Input[str] tax_type: String. The high-level tax type, such as vat or sales_tax.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaxRateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        With this resource, you can create a tax rate - [Stripe API tax rate  documentation](https://stripe.com/docs/api/tax_rates).

        Tax rates can be applied to invoices, subscriptions and Checkout Sessions to collect tax.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        tax_rate = stripe.TaxRate("taxRate",
            active=True,
            country="AU",
            description="GST Australia",
            display_name="GST",
            inclusive=True,
            jurisdiction="AU",
            metadata={},
            percentage=10,
            state="",
            tax_type="")
        ```

        :param str resource_name: The name of the resource.
        :param TaxRateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaxRateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 inclusive: Optional[pulumi.Input[bool]] = None,
                 jurisdiction: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 percentage: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tax_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaxRateArgs.__new__(TaxRateArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["country"] = country
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if inclusive is None and not opts.urn:
                raise TypeError("Missing required property 'inclusive'")
            __props__.__dict__["inclusive"] = inclusive
            __props__.__dict__["jurisdiction"] = jurisdiction
            __props__.__dict__["metadata"] = metadata
            if percentage is None and not opts.urn:
                raise TypeError("Missing required property 'percentage'")
            __props__.__dict__["percentage"] = percentage
            __props__.__dict__["state"] = state
            __props__.__dict__["tax_type"] = tax_type
            __props__.__dict__["created"] = None
            __props__.__dict__["livemode"] = None
            __props__.__dict__["object"] = None
        super(TaxRate, __self__).__init__(
            'stripe:index/taxRate:TaxRate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            country: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            inclusive: Optional[pulumi.Input[bool]] = None,
            jurisdiction: Optional[pulumi.Input[str]] = None,
            livemode: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            object: Optional[pulumi.Input[str]] = None,
            percentage: Optional[pulumi.Input[float]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tax_type: Optional[pulumi.Input[str]] = None) -> 'TaxRate':
        """
        Get an existing TaxRate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        :param pulumi.Input[str] country: String. Two-letter country code (ISO 3166-1 alpha-2).
        :param pulumi.Input[int] created: Int. Time at which the object was created. Measured in seconds since the Unix epoch.
        :param pulumi.Input[str] description: String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        :param pulumi.Input[str] display_name: String. The display name of the tax rate, which will be shown to users.
        :param pulumi.Input[bool] inclusive: Bool. This specifies if the tax rate is inclusive or exclusive.
               * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        :param pulumi.Input[str] jurisdiction: String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        :param pulumi.Input[bool] livemode: Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        :param pulumi.Input[str] object: String. String representing the object’s type. Objects of the same type share the same value.
        :param pulumi.Input[float] percentage: This represents the tax rate percent out of 100.
        :param pulumi.Input[str] state: String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        :param pulumi.Input[str] tax_type: String. The high-level tax type, such as vat or sales_tax.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaxRateState.__new__(_TaxRateState)

        __props__.__dict__["active"] = active
        __props__.__dict__["country"] = country
        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["inclusive"] = inclusive
        __props__.__dict__["jurisdiction"] = jurisdiction
        __props__.__dict__["livemode"] = livemode
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["object"] = object
        __props__.__dict__["percentage"] = percentage
        __props__.__dict__["state"] = state
        __props__.__dict__["tax_type"] = tax_type
        return TaxRate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Bool. Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[str]]:
        """
        String. Two-letter country code (ISO 3166-1 alpha-2).
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[int]:
        """
        Int. Time at which the object was created. Measured in seconds since the Unix epoch.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        String. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        String. The display name of the tax rate, which will be shown to users.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def inclusive(self) -> pulumi.Output[bool]:
        """
        Bool. This specifies if the tax rate is inclusive or exclusive.
        * `percentage ` - (Required) Float. This represents the tax rate percent out of 100.
        """
        return pulumi.get(self, "inclusive")

    @property
    @pulumi.getter
    def jurisdiction(self) -> pulumi.Output[Optional[str]]:
        """
        String. The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        """
        return pulumi.get(self, "jurisdiction")

    @property
    @pulumi.getter
    def livemode(self) -> pulumi.Output[bool]:
        """
        Bool. Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        """
        return pulumi.get(self, "livemode")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def object(self) -> pulumi.Output[str]:
        """
        String. String representing the object’s type. Objects of the same type share the same value.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Output[float]:
        """
        This represents the tax rate percent out of 100.
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        """
        String. ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="taxType")
    def tax_type(self) -> pulumi.Output[Optional[str]]:
        """
        String. The high-level tax type, such as vat or sales_tax.
        """
        return pulumi.get(self, "tax_type")

