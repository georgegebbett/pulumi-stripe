# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortalConfigurationArgs', 'PortalConfiguration']

@pulumi.input_type
class PortalConfigurationArgs:
    def __init__(__self__, *,
                 business_profile: pulumi.Input['PortalConfigurationBusinessProfileArgs'],
                 features: pulumi.Input['PortalConfigurationFeaturesArgs'],
                 active: Optional[pulumi.Input[bool]] = None,
                 default_return_url: Optional[pulumi.Input[str]] = None,
                 login_page: Optional[pulumi.Input['PortalConfigurationLoginPageArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a PortalConfiguration resource.
        :param pulumi.Input['PortalConfigurationBusinessProfileArgs'] business_profile: List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        :param pulumi.Input['PortalConfigurationFeaturesArgs'] features: List(Resource). Information about the features available in the portal. Feature section described in Feature section
        :param pulumi.Input[bool] active: Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        :param pulumi.Input[str] default_return_url: String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        :param pulumi.Input['PortalConfigurationLoginPageArgs'] login_page: List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        pulumi.set(__self__, "business_profile", business_profile)
        pulumi.set(__self__, "features", features)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if default_return_url is not None:
            pulumi.set(__self__, "default_return_url", default_return_url)
        if login_page is not None:
            pulumi.set(__self__, "login_page", login_page)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="businessProfile")
    def business_profile(self) -> pulumi.Input['PortalConfigurationBusinessProfileArgs']:
        """
        List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        """
        return pulumi.get(self, "business_profile")

    @business_profile.setter
    def business_profile(self, value: pulumi.Input['PortalConfigurationBusinessProfileArgs']):
        pulumi.set(self, "business_profile", value)

    @property
    @pulumi.getter
    def features(self) -> pulumi.Input['PortalConfigurationFeaturesArgs']:
        """
        List(Resource). Information about the features available in the portal. Feature section described in Feature section
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: pulumi.Input['PortalConfigurationFeaturesArgs']):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultReturnUrl")
    def default_return_url(self) -> Optional[pulumi.Input[str]]:
        """
        String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        """
        return pulumi.get(self, "default_return_url")

    @default_return_url.setter
    def default_return_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_return_url", value)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> Optional[pulumi.Input['PortalConfigurationLoginPageArgs']]:
        """
        List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        """
        return pulumi.get(self, "login_page")

    @login_page.setter
    def login_page(self, value: Optional[pulumi.Input['PortalConfigurationLoginPageArgs']]):
        pulumi.set(self, "login_page", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class _PortalConfigurationState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 business_profile: Optional[pulumi.Input['PortalConfigurationBusinessProfileArgs']] = None,
                 default_return_url: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input['PortalConfigurationFeaturesArgs']] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 login_page: Optional[pulumi.Input['PortalConfigurationLoginPageArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering PortalConfiguration resources.
        :param pulumi.Input[bool] active: Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        :param pulumi.Input['PortalConfigurationBusinessProfileArgs'] business_profile: List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        :param pulumi.Input[str] default_return_url: String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        :param pulumi.Input['PortalConfigurationFeaturesArgs'] features: List(Resource). Information about the features available in the portal. Feature section described in Feature section
        :param pulumi.Input[bool] is_default: Bool. Whether the configuration is the default.
        :param pulumi.Input['PortalConfigurationLoginPageArgs'] login_page: List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if business_profile is not None:
            pulumi.set(__self__, "business_profile", business_profile)
        if default_return_url is not None:
            pulumi.set(__self__, "default_return_url", default_return_url)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if login_page is not None:
            pulumi.set(__self__, "login_page", login_page)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="businessProfile")
    def business_profile(self) -> Optional[pulumi.Input['PortalConfigurationBusinessProfileArgs']]:
        """
        List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        """
        return pulumi.get(self, "business_profile")

    @business_profile.setter
    def business_profile(self, value: Optional[pulumi.Input['PortalConfigurationBusinessProfileArgs']]):
        pulumi.set(self, "business_profile", value)

    @property
    @pulumi.getter(name="defaultReturnUrl")
    def default_return_url(self) -> Optional[pulumi.Input[str]]:
        """
        String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        """
        return pulumi.get(self, "default_return_url")

    @default_return_url.setter
    def default_return_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_return_url", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input['PortalConfigurationFeaturesArgs']]:
        """
        List(Resource). Information about the features available in the portal. Feature section described in Feature section
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input['PortalConfigurationFeaturesArgs']]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool. Whether the configuration is the default.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> Optional[pulumi.Input['PortalConfigurationLoginPageArgs']]:
        """
        List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        """
        return pulumi.get(self, "login_page")

    @login_page.setter
    def login_page(self, value: Optional[pulumi.Input['PortalConfigurationLoginPageArgs']]):
        pulumi.set(self, "login_page", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)


class PortalConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 business_profile: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationBusinessProfileArgs']]] = None,
                 default_return_url: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationFeaturesArgs']]] = None,
                 login_page: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationLoginPageArgs']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        With this resource, you can create a Customer Portal Configuration - [Stripe API portal configuration documentation](https://stripe.com/docs/api/customer_portal/configuration).

        The Billing customer portal is a Stripe-hosted UI for subscription and billing management.

        A portal configuration describes the functionality and features that you want to provide to your customers through the portal.

        > Removal of the Customer Portal isn't supported through the Stripe SDK. The best practice, which this provider follows,
        is to deactivate the Customer Portal by marking it as inactive on destroy, which indicates that resource is no longer
        available.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        # A billing portal using all the available options
        portal_configuration = stripe.PortalConfiguration("portalConfiguration",
            business_profile=stripe.PortalConfigurationBusinessProfileArgs(
                headline="My special headline",
                privacy_policy_url="https://example.com/privacy",
                terms_of_service_url="https://example.com/terms",
            ),
            default_return_url="https://example.com/special_headline",
            features=stripe.PortalConfigurationFeaturesArgs(
                customer_update=stripe.PortalConfigurationFeaturesCustomerUpdateArgs(
                    allowed_updates=[
                        "email",
                        "address",
                        "shipping",
                        "phone",
                        "tax_id",
                    ],
                    enabled=True,
                ),
                invoice_history=stripe.PortalConfigurationFeaturesInvoiceHistoryArgs(
                    enabled=True,
                ),
                payment_method_update=stripe.PortalConfigurationFeaturesPaymentMethodUpdateArgs(
                    enabled=True,
                ),
                subscription_cancel=stripe.PortalConfigurationFeaturesSubscriptionCancelArgs(
                    cancellation_reason=stripe.PortalConfigurationFeaturesSubscriptionCancelCancellationReasonArgs(
                        enabled=True,
                        options=[
                            "too_expensive",
                            "missing_features",
                            "switched_service",
                            "unused",
                            "customer_service",
                            "too_complex",
                            "low_quality",
                            "other",
                        ],
                    ),
                    enabled=True,
                    mode="at_period_end",
                    proration_behavior="none",
                ),
                subscription_pauses=[stripe.PortalConfigurationFeaturesSubscriptionPauseArgs(
                    enabled=True,
                )],
                subscription_updates=[stripe.PortalConfigurationFeaturesSubscriptionUpdateArgs(
                    default_allowed_updates=[
                        "price",
                        "quantity",
                        "promotion_code",
                    ],
                    enabled=True,
                    products=[stripe.PortalConfigurationFeaturesSubscriptionUpdateProductArgs(
                        prices=[
                            "my_price_id1",
                            "my_price_id2",
                        ],
                        product="my_product_id",
                    )],
                    proration_behavior="none",
                )],
            ),
            metadata={
                "foo": "bar",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        :param pulumi.Input[pulumi.InputType['PortalConfigurationBusinessProfileArgs']] business_profile: List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        :param pulumi.Input[str] default_return_url: String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        :param pulumi.Input[pulumi.InputType['PortalConfigurationFeaturesArgs']] features: List(Resource). Information about the features available in the portal. Feature section described in Feature section
        :param pulumi.Input[pulumi.InputType['PortalConfigurationLoginPageArgs']] login_page: List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PortalConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        With this resource, you can create a Customer Portal Configuration - [Stripe API portal configuration documentation](https://stripe.com/docs/api/customer_portal/configuration).

        The Billing customer portal is a Stripe-hosted UI for subscription and billing management.

        A portal configuration describes the functionality and features that you want to provide to your customers through the portal.

        > Removal of the Customer Portal isn't supported through the Stripe SDK. The best practice, which this provider follows,
        is to deactivate the Customer Portal by marking it as inactive on destroy, which indicates that resource is no longer
        available.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_stripe as stripe

        # A billing portal using all the available options
        portal_configuration = stripe.PortalConfiguration("portalConfiguration",
            business_profile=stripe.PortalConfigurationBusinessProfileArgs(
                headline="My special headline",
                privacy_policy_url="https://example.com/privacy",
                terms_of_service_url="https://example.com/terms",
            ),
            default_return_url="https://example.com/special_headline",
            features=stripe.PortalConfigurationFeaturesArgs(
                customer_update=stripe.PortalConfigurationFeaturesCustomerUpdateArgs(
                    allowed_updates=[
                        "email",
                        "address",
                        "shipping",
                        "phone",
                        "tax_id",
                    ],
                    enabled=True,
                ),
                invoice_history=stripe.PortalConfigurationFeaturesInvoiceHistoryArgs(
                    enabled=True,
                ),
                payment_method_update=stripe.PortalConfigurationFeaturesPaymentMethodUpdateArgs(
                    enabled=True,
                ),
                subscription_cancel=stripe.PortalConfigurationFeaturesSubscriptionCancelArgs(
                    cancellation_reason=stripe.PortalConfigurationFeaturesSubscriptionCancelCancellationReasonArgs(
                        enabled=True,
                        options=[
                            "too_expensive",
                            "missing_features",
                            "switched_service",
                            "unused",
                            "customer_service",
                            "too_complex",
                            "low_quality",
                            "other",
                        ],
                    ),
                    enabled=True,
                    mode="at_period_end",
                    proration_behavior="none",
                ),
                subscription_pauses=[stripe.PortalConfigurationFeaturesSubscriptionPauseArgs(
                    enabled=True,
                )],
                subscription_updates=[stripe.PortalConfigurationFeaturesSubscriptionUpdateArgs(
                    default_allowed_updates=[
                        "price",
                        "quantity",
                        "promotion_code",
                    ],
                    enabled=True,
                    products=[stripe.PortalConfigurationFeaturesSubscriptionUpdateProductArgs(
                        prices=[
                            "my_price_id1",
                            "my_price_id2",
                        ],
                        product="my_product_id",
                    )],
                    proration_behavior="none",
                )],
            ),
            metadata={
                "foo": "bar",
            })
        ```

        :param str resource_name: The name of the resource.
        :param PortalConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortalConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 business_profile: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationBusinessProfileArgs']]] = None,
                 default_return_url: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationFeaturesArgs']]] = None,
                 login_page: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationLoginPageArgs']]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortalConfigurationArgs.__new__(PortalConfigurationArgs)

            __props__.__dict__["active"] = active
            if business_profile is None and not opts.urn:
                raise TypeError("Missing required property 'business_profile'")
            __props__.__dict__["business_profile"] = business_profile
            __props__.__dict__["default_return_url"] = default_return_url
            if features is None and not opts.urn:
                raise TypeError("Missing required property 'features'")
            __props__.__dict__["features"] = features
            __props__.__dict__["login_page"] = login_page
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["is_default"] = None
        super(PortalConfiguration, __self__).__init__(
            'stripe:index/portalConfiguration:PortalConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            business_profile: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationBusinessProfileArgs']]] = None,
            default_return_url: Optional[pulumi.Input[str]] = None,
            features: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationFeaturesArgs']]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            login_page: Optional[pulumi.Input[pulumi.InputType['PortalConfigurationLoginPageArgs']]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'PortalConfiguration':
        """
        Get an existing PortalConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        :param pulumi.Input[pulumi.InputType['PortalConfigurationBusinessProfileArgs']] business_profile: List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        :param pulumi.Input[str] default_return_url: String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        :param pulumi.Input[pulumi.InputType['PortalConfigurationFeaturesArgs']] features: List(Resource). Information about the features available in the portal. Feature section described in Feature section
        :param pulumi.Input[bool] is_default: Bool. Whether the configuration is the default.
        :param pulumi.Input[pulumi.InputType['PortalConfigurationLoginPageArgs']] login_page: List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortalConfigurationState.__new__(_PortalConfigurationState)

        __props__.__dict__["active"] = active
        __props__.__dict__["business_profile"] = business_profile
        __props__.__dict__["default_return_url"] = default_return_url
        __props__.__dict__["features"] = features
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["login_page"] = login_page
        __props__.__dict__["metadata"] = metadata
        return PortalConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Bool. Whether the configuration is active and can be used to create portal sessions. (On create it is always set as `true`)
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="businessProfile")
    def business_profile(self) -> pulumi.Output['outputs.PortalConfigurationBusinessProfile']:
        """
        List(Resource). The business information shown to customers in the portal. More details in Business Profile section
        """
        return pulumi.get(self, "business_profile")

    @property
    @pulumi.getter(name="defaultReturnUrl")
    def default_return_url(self) -> pulumi.Output[Optional[str]]:
        """
        String. The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be overriden when creating the session.
        """
        return pulumi.get(self, "default_return_url")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output['outputs.PortalConfigurationFeatures']:
        """
        List(Resource). Information about the features available in the portal. Feature section described in Feature section
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[bool]:
        """
        Bool. Whether the configuration is the default.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> pulumi.Output['outputs.PortalConfigurationLoginPage']:
        """
        List(Resource). The hosted login page for this configuration. See details in Login Page Section.
        """
        return pulumi.get(self, "login_page")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map(String). Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        """
        return pulumi.get(self, "metadata")

