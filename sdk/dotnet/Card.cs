// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Stripe = Pulumi.Stripe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // card for the customer
    ///     var cardCard = new Stripe.Card("cardCard", new()
    ///     {
    ///         Customer = stripe_customer.Customer.Id,
    ///         Number = "4242424242424242",
    ///         Cvc = 123,
    ///         ExpMonth = 8,
    ///         ExpYear = 2030,
    ///     });
    /// 
    ///     // card for the customer with address
    ///     var cardIndex_cardCard = new Stripe.Card("cardIndex/cardCard", new()
    ///     {
    ///         Customer = stripe_customer.Customer.Id,
    ///         Number = "4242424242424242",
    ///         Cvc = 123,
    ///         ExpMonth = 8,
    ///         ExpYear = 2030,
    ///         Address = 
    ///         {
    ///             { "line1", "1 The Best Street" },
    ///             { "line2", "Apartment 401" },
    ///             { "city", "Sydney" },
    ///             { "state", "NSW" },
    ///             { "zip", "2000" },
    ///             { "country", "Australia" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [StripeResourceType("stripe:index/card:Card")]
    public partial class Card : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Map(String). Address map with fields related to the address: `line1`, `line2`, `city`, `state`
        /// , `zip` and `country`.
        /// </summary>
        [Output("address")]
        public Output<ImmutableDictionary<string, string>?> Address { get; private set; } = null!;

        /// <summary>
        /// String. If address `line1` was provided, results of the check: `pass`, `fail`, `unavailable`,
        /// or `unchecked`.
        /// </summary>
        [Output("addressLine1Check")]
        public Output<string> AddressLine1Check { get; private set; } = null!;

        /// <summary>
        /// String. If address `zip` was provided, results of the check: `pass`, `fail`, `unavailable`,
        /// or `unchecked`.
        /// </summary>
        [Output("addressZipCheck")]
        public Output<string> AddressZipCheck { get; private set; } = null!;

        /// <summary>
        /// List(String). A set of available payout methods for this card. Only values from this set
        /// should be passed as the method when creating a payout.
        /// </summary>
        [Output("availablePayoutMethods")]
        public Output<ImmutableArray<string>> AvailablePayoutMethods { get; private set; } = null!;

        /// <summary>
        /// String. Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`
        /// , `Visa`, or `Unknown`.
        /// </summary>
        [Output("brand")]
        public Output<string> Brand { get; private set; } = null!;

        /// <summary>
        /// String. Two-letter ISO code representing the country of the card. You could use this attribute to get a
        /// sense of the international breakdown of cards you’ve collected.
        /// </summary>
        [Output("country")]
        public Output<string> Country { get; private set; } = null!;

        /// <summary>
        /// String. The customer that this card belongs to.
        /// </summary>
        [Output("customer")]
        public Output<string> Customer { get; private set; } = null!;

        /// <summary>
        /// Int. Card security code. Highly recommended to always include this value, but it's required only
        /// for accounts based in European countries.
        /// </summary>
        [Output("cvc")]
        public Output<int?> Cvc { get; private set; } = null!;

        /// <summary>
        /// String. If a `cvc` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A
        /// result of `unchecked` indicates that CVC was provided but hasn’t been checked yet
        /// </summary>
        [Output("cvcCheck")]
        public Output<string> CvcCheck { get; private set; } = null!;

        /// <summary>
        /// Int. Number representing the card's expiration month.
        /// </summary>
        [Output("expMonth")]
        public Output<int> ExpMonth { get; private set; } = null!;

        /// <summary>
        /// Int. Four-digit number representing the card's expiration year.
        /// </summary>
        [Output("expYear")]
        public Output<int> ExpYear { get; private set; } = null!;

        /// <summary>
        /// String. Uniquely identifies this particular card number. You can use this attribute to check whether
        /// two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize
        /// card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card
        /// number.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// String. Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        /// </summary>
        [Output("funding")]
        public Output<string> Funding { get; private set; } = null!;

        /// <summary>
        /// String. The last four digits of the card.
        /// </summary>
        [Output("last4")]
        public Output<string> Last4 { get; private set; } = null!;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// String. Cardholder name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// String. The card number, as a string without any separators.
        /// </summary>
        [Output("number")]
        public Output<string> Number { get; private set; } = null!;

        /// <summary>
        /// String. If the card number is tokenized, this is the method that was used. Can
        /// be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or `null`.
        /// </summary>
        [Output("tokenizationMethod")]
        public Output<string> TokenizationMethod { get; private set; } = null!;


        /// <summary>
        /// Create a Card resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Card(string name, CardArgs args, CustomResourceOptions? options = null)
            : base("stripe:index/card:Card", name, args ?? new CardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Card(string name, Input<string> id, CardState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/card:Card", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/georgegebbett",
                AdditionalSecretOutputs =
                {
                    "cvc",
                    "number",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Card resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Card Get(string name, Input<string> id, CardState? state = null, CustomResourceOptions? options = null)
        {
            return new Card(name, id, state, options);
        }
    }

    public sealed class CardArgs : global::Pulumi.ResourceArgs
    {
        [Input("address")]
        private InputMap<string>? _address;

        /// <summary>
        /// Map(String). Address map with fields related to the address: `line1`, `line2`, `city`, `state`
        /// , `zip` and `country`.
        /// </summary>
        public InputMap<string> Address
        {
            get => _address ?? (_address = new InputMap<string>());
            set => _address = value;
        }

        /// <summary>
        /// String. The customer that this card belongs to.
        /// </summary>
        [Input("customer", required: true)]
        public Input<string> Customer { get; set; } = null!;

        [Input("cvc")]
        private Input<int>? _cvc;

        /// <summary>
        /// Int. Card security code. Highly recommended to always include this value, but it's required only
        /// for accounts based in European countries.
        /// </summary>
        public Input<int>? Cvc
        {
            get => _cvc;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cvc = Output.Tuple<Input<int>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Int. Number representing the card's expiration month.
        /// </summary>
        [Input("expMonth", required: true)]
        public Input<int> ExpMonth { get; set; } = null!;

        /// <summary>
        /// Int. Four-digit number representing the card's expiration year.
        /// </summary>
        [Input("expYear", required: true)]
        public Input<int> ExpYear { get; set; } = null!;

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// String. Cardholder name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("number", required: true)]
        private Input<string>? _number;

        /// <summary>
        /// String. The card number, as a string without any separators.
        /// </summary>
        public Input<string>? Number
        {
            get => _number;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _number = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public CardArgs()
        {
        }
        public static new CardArgs Empty => new CardArgs();
    }

    public sealed class CardState : global::Pulumi.ResourceArgs
    {
        [Input("address")]
        private InputMap<string>? _address;

        /// <summary>
        /// Map(String). Address map with fields related to the address: `line1`, `line2`, `city`, `state`
        /// , `zip` and `country`.
        /// </summary>
        public InputMap<string> Address
        {
            get => _address ?? (_address = new InputMap<string>());
            set => _address = value;
        }

        /// <summary>
        /// String. If address `line1` was provided, results of the check: `pass`, `fail`, `unavailable`,
        /// or `unchecked`.
        /// </summary>
        [Input("addressLine1Check")]
        public Input<string>? AddressLine1Check { get; set; }

        /// <summary>
        /// String. If address `zip` was provided, results of the check: `pass`, `fail`, `unavailable`,
        /// or `unchecked`.
        /// </summary>
        [Input("addressZipCheck")]
        public Input<string>? AddressZipCheck { get; set; }

        [Input("availablePayoutMethods")]
        private InputList<string>? _availablePayoutMethods;

        /// <summary>
        /// List(String). A set of available payout methods for this card. Only values from this set
        /// should be passed as the method when creating a payout.
        /// </summary>
        public InputList<string> AvailablePayoutMethods
        {
            get => _availablePayoutMethods ?? (_availablePayoutMethods = new InputList<string>());
            set => _availablePayoutMethods = value;
        }

        /// <summary>
        /// String. Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`
        /// , `Visa`, or `Unknown`.
        /// </summary>
        [Input("brand")]
        public Input<string>? Brand { get; set; }

        /// <summary>
        /// String. Two-letter ISO code representing the country of the card. You could use this attribute to get a
        /// sense of the international breakdown of cards you’ve collected.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// String. The customer that this card belongs to.
        /// </summary>
        [Input("customer")]
        public Input<string>? Customer { get; set; }

        [Input("cvc")]
        private Input<int>? _cvc;

        /// <summary>
        /// Int. Card security code. Highly recommended to always include this value, but it's required only
        /// for accounts based in European countries.
        /// </summary>
        public Input<int>? Cvc
        {
            get => _cvc;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cvc = Output.Tuple<Input<int>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// String. If a `cvc` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A
        /// result of `unchecked` indicates that CVC was provided but hasn’t been checked yet
        /// </summary>
        [Input("cvcCheck")]
        public Input<string>? CvcCheck { get; set; }

        /// <summary>
        /// Int. Number representing the card's expiration month.
        /// </summary>
        [Input("expMonth")]
        public Input<int>? ExpMonth { get; set; }

        /// <summary>
        /// Int. Four-digit number representing the card's expiration year.
        /// </summary>
        [Input("expYear")]
        public Input<int>? ExpYear { get; set; }

        /// <summary>
        /// String. Uniquely identifies this particular card number. You can use this attribute to check whether
        /// two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize
        /// card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card
        /// number.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// String. Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        /// </summary>
        [Input("funding")]
        public Input<string>? Funding { get; set; }

        /// <summary>
        /// String. The last four digits of the card.
        /// </summary>
        [Input("last4")]
        public Input<string>? Last4 { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Map(String). Set of key-value pairs that you can attach to an object. This can be useful for
        /// storing additional information about the object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// String. Cardholder name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("number")]
        private Input<string>? _number;

        /// <summary>
        /// String. The card number, as a string without any separators.
        /// </summary>
        public Input<string>? Number
        {
            get => _number;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _number = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// String. If the card number is tokenized, this is the method that was used. Can
        /// be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or `null`.
        /// </summary>
        [Input("tokenizationMethod")]
        public Input<string>? TokenizationMethod { get; set; }

        public CardState()
        {
        }
        public static new CardState Empty => new CardState();
    }
}
